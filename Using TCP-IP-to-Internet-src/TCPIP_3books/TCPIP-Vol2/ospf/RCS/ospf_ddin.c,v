head	1.4;
access;
symbols;
locks
	dls:1.4; strict;
comment	@ * @;


1.4
date	97.09.21.19.28.38;	author dls;	state Dist;
branches;
next	1.3;

1.3
date	94.02.20.18.59.56;	author dls;	state Works;
branches;
next	1.2;

1.2
date	94.02.13.19.38.53;	author dls;	state Works;
branches;
next	1.1;

1.1
date	94.02.06.18.20.39;	author dls;	state Ok;
branches;
next	;


desc
@@


1.4
log
@pre-3e code
@
text
@/* ospf_ddin.c - ospf_ddin */

#include <conf.h>
#include <kernel.h>
#include <network.h>
#include <ospf.h>

/*------------------------------------------------------------------------
 * ospf_ddin - handled input of OSPF Data Description packets
 *------------------------------------------------------------------------
 */
int
ospf_ddin(pep)
struct ep	*pep;
{
	struct ospf_if	*pif = &ospf_if[pep->ep_ifn];
	struct ospf_nb	*pnb, *nb_add();
	struct ip	*pip;
	struct ospf	*po;
	struct ospf_dd	*pdd;

	pip = (struct ip *)pep->ep_data;
	po = (struct ospf *)((char *)pip + IP_HLEN(pip));

	pdd = (struct ospf_dd *)po->ospf_data;
	pdd->dd_seq = net2hl(pdd->dd_seq);

	pnb = nb_add(pif, po);
	if (pnb == 0)
		return 0;
	switch (pnb->nb_state) {
	case NBS_INIT:
		pnb->nb_state = NBS_2WAY;
		if (nb_aok(pif, pnb)) {
			pnb->nb_seq++;
			pnb->nb_state = NBS_EXSTART;
			nb_makel(pnb);
			dd_queue(pif, pnb);
		}
		break;
	case NBS_2WAY:
		return 0;
	case NBS_EXSTART:
		ddi_exstart(pif, pnb, pep);
		break;
	case NBS_EXCHNG:
		ddi_exchng(pif, pnb, pep);
		break;
	case NBS_LOADING:
	case NBS_FULL:
		ddi_full(pif, pnb, pep);
		break;
	}
}
@


1.3
log
@*** empty log message ***
@
text
@d20 1
d25 3
d46 3
a48 2
	case NBS_XCHNG:
		ddi_xchng(pif, pnb, pep);
@


1.2
log
@*** empty log message ***
@
text
@d46 1
a46 1
/* NBS FULL or LOADING processing (p 50) */
@


1.1
log
@Initial revision
@
text
@a19 1
	struct ospf_dd	*pdd;
a22 1
	pdd = (struct ospf_dd *)po->ospf_data;
d26 4
a29 2
		return;
	if (pnb->nb_state == NBS_INIT) {
d33 2
a34 22
			dd_send(pif, pnb);
		} else
			pnb->nb_state = NBS_2WAY;
	}
	if (pnb->nb_state == NBS_2WAY)
		return;
	if (pnb->nb_state == NBS_EXSTART) {
		int	cbits = DDC_INIT | DDC_MORE | DDC_MSTR;

		if (((pdd->dd_control & cbits) == cbits) &&
		    po->ospf_len == MINDDLEN &&
		    pnb->nb_rid > pif->if_rid) {
			pnb->nb_master = TRUE;
			pnb->nb_seq = pdd->dd_seq;
			pnb->nb_opts = pdd->dd_opts;
			pnb->nb_state = NBS_XCHNG;
		} else if (((pdd->dd_control&(DDC_INIT|DDC_MSTR)) == 0) &&
		    pdd->dd_seq == pnb->nb_seq &&
		    pnb->nb_rid < pif->if_rid) {
			pnb->nb_master = FALSE;
			pnb->nb_opts = pdd->dd_opts;
			pnb->nb_state = NBS_XCHNG;
d36 12
a47 1
/* process further */
a48 2
/* NBS_XCHNG processing (p 49) */
/* NBS FULL or LOADING processing (p 50) */
@
