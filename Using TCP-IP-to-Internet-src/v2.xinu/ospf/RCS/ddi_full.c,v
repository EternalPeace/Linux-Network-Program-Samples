head	1.2;
access;
symbols;
locks
	dls:1.2; strict;
comment	@ * @;


1.2
date	97.09.21.19.28.38;	author dls;	state Dist;
branches;
next	1.1;

1.1
date	94.02.20.18.59.56;	author dls;	state Works;
branches;
next	;


desc
@@


1.2
log
@pre-3e code
@
text
@/* ddi_full.c - ddi_full */

#include <conf.h>
#include <kernel.h>
#include <network.h>
#include <ospf.h>

/*------------------------------------------------------------------------
 * ddi_full - handle DD packet input for FULL and LOADING state neighbors
 *------------------------------------------------------------------------
 */
int ddi_full(pif, pnb, pep)
struct ospf_if	*pif;
struct ospf_nb	*pnb;
struct ep	*pep;
{
	struct ip	*pip = (struct ip *)pep->ep_data;
	struct ospf	*po = (struct ospf *)((char *)pip + IP_HLEN(pip));
	struct ospf_dd	*pdd = (struct ospf_dd *)po->ospf_data;

	if (((pdd->dd_control & DDC_MSTR) & pnb->nb_master) ||
	    (!(pdd->dd_control & DDC_MSTR) & !pnb->nb_master) ||
	    (pdd->dd_control & DDC_INIT) ||
	    (pdd->dd_opts != pnb->nb_opts))
		return nb_mismatch(pif, pnb);
	if (pnb->nb_master && pdd->dd_seq == pnb->nb_seq-1)
		return 0;		/* duplicate; master discards */
	if (!pnb->nb_master && pdd->dd_seq == pnb->nb_seq) {
		dd_xmit(pif, pnb);	/* duplicate; slave responds */
		return 1;
	}
	/* else, NOT a duplicate; Sequence mismatch */
	return nb_mismatch(pif, pnb);
}
@


1.1
log
@Initial revision
@
text
@@
