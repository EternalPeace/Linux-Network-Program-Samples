HADD	history.c	/^#define	HADD(h, str)	(*(h)->h_add)((h)->h_ref, str/
HCURR	history.c	/^#define	HCURR(h) 	(*(h)->h_curr)((h)->h_ref)$/
HENTER	history.c	/^#define	HENTER(h, str)	(*(h)->h_enter)((h)->h_ref,/
HFIRST	history.c	/^#define	HFIRST(h) 	(*(h)->h_first)((h)->h_ref)$/
HLAST	history.c	/^#define	HLAST(h) 	(*(h)->h_last)((h)->h_ref)$/
HNEXT	history.c	/^#define	HNEXT(h)  	(*(h)->h_next)((h)->h_ref)$/
HPREV	history.c	/^#define	HPREV(h)  	(*(h)->h_prev)((h)->h_ref)$/
h_free	history.c	/^#define h_free(a)	free(a)$/
h_malloc	history.c	/^#define h_malloc(a)	malloc(a)$/
history	history.c	/^history(va_alist)$/
history_def_add	history.c	/^history_def_add(p, str)$/
history_def_curr	history.c	/^history_def_curr(p)$/
history_def_delete	history.c	/^history_def_delete(h, hp)$/
history_def_end	history.c	/^history_def_end(p)$/
history_def_enter	history.c	/^history_def_enter(p, str)$/
history_def_first	history.c	/^history_def_first(p)$/
history_def_init	history.c	/^history_def_init(p, n)$/
history_def_insert	history.c	/^history_def_insert(h, str)$/
history_def_last	history.c	/^history_def_last(p)$/
history_def_next	history.c	/^history_def_next(p)$/
history_def_prev	history.c	/^history_def_prev(p)$/
history_def_set	history.c	/^#define history_def_set(p, num)	(void) (((history_/
history_end	history.c	/^history_end(h)$/
history_init	history.c	/^history_init()$/
history_next_event	history.c	/^history_next_event(h, num)$/
history_next_string	history.c	/^history_next_string(h, str)$/
history_prev_event	history.c	/^history_prev_event(h, num)$/
history_prev_string	history.c	/^history_prev_string(h, str)$/
history_set_fun	history.c	/^history_set_fun(h, first, next, last, prev, curr, /
history_set_num	history.c	/^history_set_num(h, num)$/
tok_end	tokenizer.c	/^tok_end(tok)$/
tok_finish	tokenizer.c	/^tok_finish(tok)$/
tok_free	tokenizer.c	/^#define tok_free(a)		free(a)$/
tok_init	tokenizer.c	/^tok_init(ifs)$/
tok_line	tokenizer.c	/^tok_line(tok, line, argc, argv)$/
tok_malloc	tokenizer.c	/^#define tok_malloc(a)		malloc(a)$/
tok_realloc	tokenizer.c	/^#define tok_realloc(a, b)	realloc(a, b)$/
tok_reset	tokenizer.c	/^tok_reset(tok)$/
