BUFSPACE	opts.c	/^#define BUFSPACE(ep, len) (((ep) + (len)) < expbuf/
CID_ALLOC	clock.c	/^#define	CID_ALLOC()	(++callout_id)$/
FHID_ALLOC	nfs_ops.c	/^#define	FHID_ALLOC()	(++fh_id)$/
IN_PROGRESS	afs_ops.c	/^#define	IN_PROGRESS(cp) ((cp)->mp->am_mnt->mf_flag/
MAKE_HES_NAME	info_hes.c	/^#define MAKE_HES_NAME(dest, src) sprintf(dest, "%s/
MAKE_MNTPT	host_ops.c	/^#define MAKE_MNTPT(mntpt, ex, mf) { \\$/
MAPC_ISRE	mapc.c	/^#define	MAPC_ISRE(m) ((m)->alloc == MAPC_RE)$/
Mamd	amd.c	/^main(argc, argv)$/
NPXID_ALLOC	srvr_nfs.c	/^#define	NPXID_ALLOC()	(++np_xid)$/
P	nfs_ops.c	/^int make_nfs_auth P((void))$/
S	opts.c	/^#define S(x) (x) , (sizeof(x)-1)$/
XID_ALLOC	rpc_fwd.c	/^#define	XID_ALLOC()	(xid++)$/
add_address	info_hes.c	/^add_address(addr)$/
afs_bgmount	afs_ops.c	/^static int afs_bgmount(cp, mpe)$/
afs_cont	afs_ops.c	/^static void afs_cont(rc, term, closure)$/
afs_lookuppn	afs_ops.c	/^static am_node *afs_lookuppn(mp, fname, error_retu/
afs_match	afs_ops.c	/^static char *afs_match(fo)$/
afs_mkcacheref	afs_ops.c	/^static void afs_mkcacheref(mf)$/
afs_mount	afs_ops.c	/^static int afs_mount(mp)$/
afs_readdir	afs_ops.c	/^static int afs_readdir(mp, cookie, dp, ep, count)$/
afs_retry	afs_ops.c	/^static void afs_retry(rc, term, closure)$/
afs_umount	afs_ops.c	/^static int afs_umount(mp)$/
afs_umounted	afs_ops.c	/^static void afs_umounted(mp)$/
alloc_callout	clock.c	/^static callout *alloc_callout()$/
alloc_mntfs	mntfs.c	/^static mntfs *alloc_mntfs(ops, mo, mp, info, auto_/
already_mounted	host_ops.c	/^static int already_mounted(mlist, dir)$/
am_mounted	util.c	/^void am_mounted(mp)$/
am_unmounted	util.c	/^void am_unmounted(mp)$/
amq_program_1	../rpcx/amq_svc.c	/^amq_program_1(rqstp, transp)$/
amqproc_export_1	amq_subr.c	/^amqproc_export_1(argp, rqstp)$/
amqproc_getmntfs_1	amq_subr.c	/^amqproc_getmntfs_1(argp, rqstp)$/
amqproc_getvers_1	amq_subr.c	/^amqproc_getvers_1(argp, rqstp)$/
amqproc_mnttree_1	amq_subr.c	/^amqproc_mnttree_1(argp, rqstp)$/
amqproc_mount_1	amq_subr.c	/^amqproc_mount_1(argp, rqstp)$/
amqproc_null_1	amq_subr.c	/^amqproc_null_1(argp, rqstp)$/
amqproc_setopt_1	amq_subr.c	/^amqproc_setopt_1(argp, rqstp)$/
amqproc_stats_1	amq_subr.c	/^amqproc_stats_1(argp, rqstp)$/
amqproc_umnt_1	amq_subr.c	/^amqproc_umnt_1(argp, rqstp)$/
apply_opts	opts.c	/^static void apply_opts(op, ppp, b)$/
assign_error_mntfs	afs_ops.c	/^static void assign_error_mntfs(mp)$/
auto_fmount	util.c	/^int auto_fmount(mp)$/
auto_fumount	util.c	/^int auto_fumount(mp)$/
background	util.c	/^int background()$/
bind_resv_port	util.c	/^int bind_resv_port(so, pp)$/
call_mountd	nfs_ops.c	/^static int call_mountd(fp, proc, f, wchan)$/
call_portmap	srvr_nfs.c	/^static int call_portmap(fs, auth, prog, vers, prot/
callback	info_nis.c	/^static int callback(status, key, kl, val, vl, data/
checkup	nfs_start.c	/^static void checkup(P_void)$/
checkup_mem	xutil.c	/^static void checkup_mem(P_void)$/
clnt_sperrno	misc_rpc.c	/^clnt_sperrno(stat)$/
clocktime	xutil.c	/^time_t clocktime(P_void)$/
cmdoption	xutil.c	/^int cmdoption(s, optb, flags)$/
compute_mount_flags	mount_fs.c	/^int compute_mount_flags(mnt)$/
create_union_node	afs_ops.c	/^static int create_union_node(dir, arg)$/
daemon_mode	amd.c	/^static int daemon_mode(P_void)$/
debug_option	get_args.c	/^int debug_option(opt)$/
deslashify	opts.c	/^void deslashify(s)$/
determine_nis_domain	info_nis.c	/^static int determine_nis_domain(P_void)$/
dfs_readlink	afs_ops.c	/^static am_node *dfs_readlink(mp, error_return)$/
directory_prefix	host_ops.c	/^static int directory_prefix(pref, dir)$/
discard_fh	nfs_ops.c	/^static void discard_fh(fp)$/
discard_mntfs	mntfs.c	/^static void discard_mntfs(mf)$/
discard_mntlist	mtab.c	/^void discard_mntlist(mp)$/
do_mount	host_ops.c	/^static int do_mount(fhp, dir, fs_name, opts, mf)$/
do_readlink	nfs_subr.c	/^static char *do_readlink(mp, error_return, attrpp)/
do_select	nfs_start.c	/^static int do_select(smask, fds, fdp, tvp)$/
dofork	util.c	/^static int dofork()$/
domain_strip	util.c	/^static void domain_strip(otherdom, localdom)$/
dplog	xutil.c	/^void dplog(fmt, j,s,_,p,e,n,d,r,y)$/
dup_mntfs	mntfs.c	/^mntfs *dup_mntfs(mf)$/
dup_srvr	srvr_afs.c	/^fserver *dup_srvr(fs)$/
efs_fmount	efs_ops.c	/^static int efs_fmount(mf)$/
efs_fumount	efs_ops.c	/^static int efs_fumount(mf)$/
efs_lookuppn	efs_ops.c	/^am_node *efs_lookuppn(mp, fname, error_return, op)/
efs_match	efs_ops.c	/^static char *efs_match(fo)$/
efs_readdir	efs_ops.c	/^int efs_readdir(mp, cookie, dp, ep, count)$/
ereturn	afs_ops.c	/^#define ereturn(x) { *error_return = x; return 0; /
error_init	mapc.c	/^static int error_init(map, tp)$/
error_mtime	mapc.c	/^static int error_mtime(map, tp)$/
error_reload	mapc.c	/^static int error_reload(m, map, fn)$/
error_search	mapc.c	/^static int error_search(m, map, key, pval, tp)$/
eval_fs_opts	opts.c	/^int eval_fs_opts(fo, opts, g_opts, path, key, map)/
eval_opts	opts.c	/^static int eval_opts(opts, mapkey)$/
expand_error	xutil.c	/^static void expand_error(f, e)$/
expand_key	opts.c	/^char *expand_key(key)$/
expand_op	opts.c	/^static void expand_op(p, sel_p)$/
expand_opts	opts.c	/^static void expand_opts(p, sel_p)$/
exported_ap_alloc	map.c	/^am_node *exported_ap_alloc(P_void)$/
exported_ap_free	map.c	/^void exported_ap_free(mp)$/
exported_ap_realloc_map	map.c	/^static int exported_ap_realloc_map(nsize)$/
fetch_fhandle	host_ops.c	/^static int fetch_fhandle(client, dir, fhp)$/
fh_to_mp	map.c	/^am_node *fh_to_mp(fhp)$/
fh_to_mp3	map.c	/^am_node *fh_to_mp3(fhp, rp, c_or_d)$/
file_init	info_file.c	/^int file_init(map, tp)$/
file_mtime	info_file.c	/^int file_mtime(map, tp)$/
file_open	info_file.c	/^static FILE *file_open(map, tp)$/
file_reload	info_file.c	/^int file_reload(m, map, fn)$/
file_search	info_file.c	/^int file_search(m, map, key, pval, tp)$/
find_afs_srvr	srvr_afs.c	/^fserver *find_afs_srvr(mf)$/
find_ap	map.c	/^am_node *find_ap(dir)$/
find_ap2	map.c	/^static am_node *find_ap2(dir, mp)$/
find_mf	map.c	/^am_node *find_mf(mf)$/
find_mntfs	mntfs.c	/^mntfs *find_mntfs(ops, mo, mp, info, auto_opts, mo/
find_nfs_fhandle_cache	nfs_ops.c	/^static fh_cache *find_nfs_fhandle_cache(idv, done)/
find_nfs_srvr	srvr_nfs.c	/^fserver *find_nfs_srvr(mf)$/
flush_kernel_name_cache	map.c	/^static void flush_kernel_name_cache(mp)$/
flush_mntfs	mntfs.c	/^void flush_mntfs()$/
flush_nfs_fhandle_cache	nfs_ops.c	/^void flush_nfs_fhandle_cache(fs)$/
flush_srvr_nfs_cache	srvr_nfs.c	/^void flush_srvr_nfs_cache()$/
forcibly_timeout_mp	util.c	/^void forcibly_timeout_mp(mp)$/
free_callout	clock.c	/^static void free_callout(cp)$/
free_continuation	afs_ops.c	/^static void free_continuation(cp)$/
free_map	map.c	/^void free_map(mp)$/
free_map_if_success	map.c	/^static void free_map_if_success(rc, term, closure)/
free_mntfs	mntfs.c	/^void free_mntfs(mf)$/
free_mntlist	mtab.c	/^void free_mntlist(mp)$/
free_op	opts.c	/^static void free_op(p, b)$/
free_opts	opts.c	/^void free_opts(fo)$/
free_srvr	srvr_afs.c	/^void free_srvr(fs)$/
fwd_alloc	rpc_fwd.c	/^static rpc_forward *fwd_alloc()$/
fwd_free	rpc_fwd.c	/^static void fwd_free(p)$/
fwd_init	rpc_fwd.c	/^int fwd_init()$/
fwd_locate	rpc_fwd.c	/^static rpc_forward *fwd_locate(id)$/
fwd_packet	rpc_fwd.c	/^int fwd_packet(type_id, pkt, len, fwdto, replyto, /
fwd_reply	rpc_fwd.c	/^void fwd_reply()$/
get_args	get_args.c	/^void get_args(c, v)$/
getwire	wire.c	/^char *getwire()$/
going_down	util.c	/^void going_down(rc)$/
got_nfs_fh	nfs_ops.c	/^static void got_nfs_fh(pkt, len, sa, ia, idv, done/
got_portmap	srvr_nfs.c	/^static void got_portmap(pkt, len, sa, ia, idv, don/
hasmntopt	mount_fs.c	/^char *hasmntopt(mnt, opt)$/
hasmntval	mtab.c	/^int hasmntval(mnt, opt)$/
hesiod_init	info_hes.c	/^int hesiod_init(map, tp)$/
hesiod_reload	info_hes.c	/^int hesiod_reload(m, map, fn)$/
hesiod_search	info_hes.c	/^int hesiod_search(m, map, key, pval, tp)$/
host_exec	host_ops.c	/^static int host_exec(op, host, fs, opts)$/
host_fmount	host_ops.c	/^static int host_fmount(mf)$/
host_fumount	host_ops.c	/^static int host_fumount(mf)$/
host_init	host_ops.c	/^static int host_init(mf)$/
host_match	host_ops.c	/^static char *host_match(fo)$/
host_mount	host_ops.c	/^static int host_mount(mp)$/
host_normalize	util.c	/^void host_normalize(chp)$/
host_umount	host_ops.c	/^static int host_umount(mp)$/
host_umounted	host_ops.c	/^static void host_umounted(mp)$/
hs_get_ns_list	info_hes.c	/^hs_get_ns_list(domain)$/
hs_make_ns_query	info_hes.c	/^hs_make_ns_query(domain, ansbuf)$/
hs_make_value	info_hes.c	/^hs_make_value(cp, len)$/
hs_parse	info_hes.c	/^hs_parse(msg, eom)$/
hs_readresp	info_hes.c	/^hs_readresp(s, answer, anslen)$/
hs_res_selwait	info_hes.c	/^hs_res_selwait(sock, timeout)$/
hs_res_send	info_hes.c	/^hs_res_send(buf, buflen, answer, anslen)$/
hs_res_vcread	info_hes.c	/^hs_res_vcread(sock, buf, buflen, timeout)$/
hs_server_addr	info_hes.c	/^#define hs_server_addr(ns) ((struct in_addr *) nsa/
hs_strip_our_domain	info_hes.c	/^hs_strip_our_domain(name)$/
hs_zone_transfer	info_hes.c	/^hs_zone_transfer(domain)$/
ifs_fmount	ifs_ops.c	/^static int ifs_fmount(mf)$/
ifs_fumount	ifs_ops.c	/^static int ifs_fumount(mf)$/
ifs_inherit	ifs_ops.c	/^static mntfs *ifs_inherit(mf)$/
ifs_init	ifs_ops.c	/^static int ifs_init(mf)$/
ifs_match	ifs_ops.c	/^static char *ifs_match(fo)$/
ifs_mount	ifs_ops.c	/^static int ifs_mount(mp)$/
inet_dquad	util.c	/^char *inet_dquad(buf, addr)$/
init_map	map.c	/^void init_map(mp, dir)$/
init_mntfs	mntfs.c	/^static void init_mntfs(mf, ops, mo, mp, info, auto/
ins_que	sched.c	/^void ins_que(elem, pred)$/
insert_am	map.c	/^void insert_am(mp, p_mp)$/
islocalnet	wire.c	/^int islocalnet(addr)$/
kvhash_of	mapc.c	/^static unsigned int kvhash_of(key)$/
make_root_node	map.c	/^void make_root_node()$/
make_rpc_packet	misc_rpc.c	/^int make_rpc_packet(buf, buflen, proc, mp, arg, ar/
map_flush_srvr	map.c	/^void map_flush_srvr(fs)$/
mapc_add_kv	mapc.c	/^void mapc_add_kv(m, key, val)$/
mapc_clear	mapc.c	/^static void mapc_clear(m)$/
mapc_create	mapc.c	/^static mnt_map *mapc_create(map, opt)$/
mapc_dup	mapc.c	/^#define mapc_dup(m) ((m)->refc++, (m))$/
mapc_find	mapc.c	/^mnt_map *mapc_find(map, opt)$/
mapc_find_wildcard	mapc.c	/^static void mapc_find_wildcard(m)$/
mapc_free	mapc.c	/^void mapc_free(m)$/
mapc_keyiter	mapc.c	/^int mapc_keyiter(m, fn, arg)$/
mapc_meta_search	mapc.c	/^int mapc_meta_search(m, key, pval, recurse)$/
mapc_reload	mapc.c	/^void mapc_reload()$/
mapc_reload_map	mapc.c	/^static int mapc_reload_map(m)$/
mapc_repl_kv	mapc.c	/^void mapc_repl_kv(m, key, val)$/
mapc_search	mapc.c	/^int mapc_search(m, key, pval)$/
mapc_showtypes	mapc.c	/^void mapc_showtypes(fp)$/
mapc_sync	mapc.c	/^static void mapc_sync(m)$/
max	wire.c	/^#define max(a, b) ((a) > (b) ? (a) : (b))$/
mf_mounted	util.c	/^void mf_mounted(mf)$/
mk_fattr	map.c	/^void mk_fattr(mp, vntype)$/
mkdirs	util.c	/^int mkdirs(path, mode)$/
mnt_dup	../config/mtab_bsd.c	/^static struct mntent *mnt_dup(mp)$/
mnt_free	mtab.c	/^void mnt_free(mp)$/
mount_auto_node	map.c	/^int mount_auto_node(dir, arg)$/
mount_exported	map.c	/^int mount_exported()$/
mount_fs	mount_fs.c	/^int mount_fs(mnt, flags, mnt_data, retry, type)$/
mount_nfs	nfs_ops.c	/^static int mount_nfs(dir, fs_name, opts, mf)$/
mount_nfs_fh	nfs_ops.c	/^int mount_nfs_fh(fhp, dir, fs_name, opts, mf)$/
mount_node	util.c	/^int mount_node(mp)$/
mount_toplvl	afs_ops.c	/^static int mount_toplvl(dir, opts)$/
mount_ufs	ufs_ops.c	/^static mount_ufs(dir, fs_name, opts)$/
mp_to_fh	map.c	/^void mp_to_fh(mp, fhp)$/
ndbm_init	info_ndbm.c	/^int ndbm_init(map, tp)$/
ndbm_search	info_ndbm.c	/^int ndbm_search(m, map, key, pval, tp)$/
new_gen	map.c	/^#define new_gen() (am_gen++)$/
new_mntfs	mntfs.c	/^mntfs *new_mntfs()$/
new_ttl	map.c	/^void new_ttl(mp)$/
next_nonerror_node	afs_ops.c	/^static am_node *next_nonerror_node(xp)$/
nextmntopt	mount_fs.c	/^static char *nextmntopt(p)$/
nfs_error	nfs_subr.c	/^#define nfs_error(e) \\$/
nfs_fmount	nfs_ops.c	/^static int nfs_fmount(mf)$/
nfs_fumount	nfs_ops.c	/^static int nfs_fumount(mf)$/
nfs_init	nfs_ops.c	/^static int nfs_init(mf)$/
nfs_keepalive	srvr_nfs.c	/^static void nfs_keepalive(fs)$/
nfs_match	nfs_ops.c	/^static char *nfs_match(fo)$/
nfs_pinged	srvr_nfs.c	/^static void nfs_pinged(pkt, len, sp, tsp, idv, don/
nfs_program_2	../rpcx/nfs_prot_svc.c	/^void nfs_program_2(rqstp, transp)$/
nfs_srvr_port	srvr_nfs.c	/^int nfs_srvr_port(fs, port, wchan)$/
nfs_timed_out	srvr_nfs.c	/^static void nfs_timed_out(fs)$/
nfs_umounted	nfs_ops.c	/^static void nfs_umounted(mp)$/
nfsproc_create_2	nfs_subr.c	/^nfsproc_create_2(argp, rqstp)$/
nfsproc_getattr_2	nfs_subr.c	/^nfsproc_getattr_2(argp, rqstp)$/
nfsproc_link_2	nfs_subr.c	/^nfsproc_link_2(argp, rqstp)$/
nfsproc_lookup_2	nfs_subr.c	/^nfsproc_lookup_2(argp, rqstp)$/
nfsproc_mkdir_2	nfs_subr.c	/^nfsproc_mkdir_2(argp, rqstp)$/
nfsproc_null_2	nfs_subr.c	/^nfsproc_null_2(argp, rqstp)$/
nfsproc_read_2	nfs_subr.c	/^nfsproc_read_2(argp, rqstp)$/
nfsproc_readdir_2	nfs_subr.c	/^nfsproc_readdir_2(argp, rqstp)$/
nfsproc_readlink_2	nfs_subr.c	/^nfsproc_readlink_2(argp, rqstp)$/
nfsproc_remove_2	nfs_subr.c	/^nfsproc_remove_2(argp, rqstp)$/
nfsproc_rename_2	nfs_subr.c	/^nfsproc_rename_2(argp, rqstp)$/
nfsproc_rmdir_2	nfs_subr.c	/^nfsproc_rmdir_2(argp, rqstp)$/
nfsproc_root_2	nfs_subr.c	/^nfsproc_root_2(argp, rqstp)$/
nfsproc_setattr_2	nfs_subr.c	/^nfsproc_setattr_2(argp, rqstp)$/
nfsproc_statfs_2	nfs_subr.c	/^nfsproc_statfs_2(argp, rqstp)$/
nfsproc_symlink_2	nfs_subr.c	/^nfsproc_symlink_2(argp, rqstp)$/
nfsproc_write_2	nfs_subr.c	/^nfsproc_write_2(argp, rqstp)$/
nfsproc_writecache_2	nfs_subr.c	/^nfsproc_writecache_2(argp, rqstp)$/
nfsx_cont	nfsx_ops.c	/^static void nfsx_cont(rc, term, closure)$/
nfsx_fmount	nfsx_ops.c	/^static int nfsx_fmount(mf)$/
nfsx_fumount	nfsx_ops.c	/^static int nfsx_fumount(mf)$/
nfsx_init	nfsx_ops.c	/^static int nfsx_init(mf)$/
nfsx_match	nfsx_ops.c	/^static char *nfsx_match(fo)$/
nfsx_prfree	nfsx_ops.c	/^static void nfsx_prfree(vp)$/
nfsx_remount	nfsx_ops.c	/^static int nfsx_remount(mf, fg)$/
nis_init	info_nis.c	/^int nis_init(map, tp)$/
nis_reload	info_nis.c	/^int nis_reload(m, map, fn)$/
nis_search	info_nis.c	/^int nis_search(m, map, key, val, tp)$/
normalize_slash	opts.c	/^void normalize_slash(p)$/
ok_security	amq_subr.c	/^static int ok_security(rqstp)$/
ops_match	am_ops.c	/^am_ops *ops_match(fo, key, g_key, path, keym, map)/
ops_showfstypes	am_ops.c	/^void ops_showfstypes(fp)$/
opt	opts.c	/^static char *opt(p)$/
parent_exit	amd.c	/^static void parent_exit(sig)$/
passwd_init	info_passwd.c	/^int passwd_init(map, tp)$/
passwd_search	info_passwd.c	/^int passwd_search(m, map, key, pval, tp)$/
pfs_exec	pfs_ops.c	/^static int pfs_exec(info)$/
pfs_fmount	pfs_ops.c	/^static int pfs_fmount(mf)$/
pfs_fumount	pfs_ops.c	/^static int pfs_fumount(mf)$/
pfs_init	pfs_ops.c	/^static int pfs_init(mf)$/
pfs_match	pfs_ops.c	/^static char *pfs_match(fo)$/
pickup_rpc_reply	misc_rpc.c	/^int pickup_rpc_reply(pkt, len, where, where_xdr)$/
plog	xutil.c	/^void plog(lvl, fmt, j,s,_,p,e,n,d,r,y)$/
prime_nfs_fhandle_cache	nfs_ops.c	/^static int prime_nfs_fhandle_cache(path, fs, fhbuf/
read_line	info_file.c	/^static int read_line(buf, size, fp)$/
read_mtab	../config/mtab_bsd.c	/^mntlist *read_mtab(fs)$/
realloc_mntfs	mntfs.c	/^mntfs *realloc_mntfs(mf, ops, mo, mp, info, auto_o/
recompute_portmap	srvr_nfs.c	/^static void recompute_portmap(fs)$/
regerror	mapc.c	/^void regerror(m)$/
rem_que	sched.c	/^void rem_que(elem)$/
remove_am	map.c	/^void remove_am(mp)$/
reschedule_timeout_mp	map.c	/^void reschedule_timeout_mp()$/
reschedule_timeouts	clock.c	/^void reschedule_timeouts(now, then)$/
restart	restart.c	/^void restart()$/
rmdirs	util.c	/^void rmdirs(dir)$/
root_ap	map.c	/^am_node *root_ap(dir, path)$/
root_fh	map.c	/^nfs_fh *root_fh(dir)$/
root_init	mapc.c	/^static int root_init(map, tp)$/
root_keyiter	mapc.c	/^int root_keyiter(fn, arg)$/
root_mount	afs_ops.c	/^static int root_mount(mp)$/
root_newmap	mapc.c	/^void root_newmap(dir, opts, map)$/
rpc_msg_init	misc_rpc.c	/^void rpc_msg_init(mp, prog, vers, proc)$/
rpc_pending_now	nfs_start.c	/^static int rpc_pending_now()$/
run_rpc	nfs_start.c	/^static serv_state run_rpc(P_void)$/
run_task	sched.c	/^void run_task(tf, ta, cf, ca)$/
sched_job	sched.c	/^static pjob *sched_job(cf, ca)$/
sched_task	sched.c	/^void sched_task(cf, ca, wchan)$/
search_map	mapc.c	/^static int search_map(m, key, valp)$/
search_ndbm	info_ndbm.c	/^static int search_ndbm(db, key, val)$/
search_or_reload_file	info_file.c	/^static int search_or_reload_file(fp, map, key, val/
sfs_fmount	sfs_ops.c	/^static int sfs_fmount(mf)$/
sfs_fumount	sfs_ops.c	/^static int sfs_fumount(mf)$/
sfs_match	sfs_ops.c	/^static char *sfs_match(fo)$/
sfsx_mount	sfs_ops.c	/^static int sfsx_mount(mp)$/
show_opts	xutil.c	/^void show_opts(ch, opts)$/
show_time_host_and_name	xutil.c	/^static void show_time_host_and_name(lvl)$/
sigchld	sched.c	/^void sigchld(sig)$/
sighup	amd.c	/^static void sighup(sig)$/
sigterm	amd.c	/^static void sigterm(sig)$/
size	wire.c	/^#define size(ifr) (max((ifr)->ifr_addr.sa_len, siz/
smallest_t	map.c	/^#define	smallest_t(t1, t2) \\$/
softclock	clock.c	/^int softclock()$/
sortfun	host_ops.c	/^static int sortfun(a, b)$/
srvrlog	srvr_afs.c	/^void srvrlog(fs, state)$/
start_nfs_pings	srvr_nfs.c	/^static void start_nfs_pings(fs, pingval)$/
start_ping	srvr_nfs.c	/^static void start_ping()$/
str3cat	util.c	/^char *str3cat(p, s1, s2, s3)$/
strdup	util.c	/^char *strdup(s)$/
strealloc	util.c	/^char *strealloc(p, s)$/
strnsave	util.c	/^char *strnsave(str, len)$/
strsplit	util.c	/^char **strsplit(s, ch, qc)$/
sunos4_match	am_ops.c	/^am_ops *sunos4_match(fo, key, g_key, path, keym, m/
switch_option	xutil.c	/^int switch_option(opt)$/
switch_to_logfile	xutil.c	/^int switch_to_logfile(logfile)$/
timeout	clock.c	/^int timeout(secs, fn, closure)$/
timeout_mp	map.c	/^void timeout_mp()$/
timeout_srvr	srvr_afs.c	/^static void timeout_srvr(fs)$/
toplvl_mount	afs_ops.c	/^static int toplvl_mount(mp)$/
toplvl_mounted	afs_ops.c	/^static void toplvl_mounted(mf)$/
toplvl_umount	afs_ops.c	/^static int toplvl_umount(mp)$/
try_mount	afs_ops.c	/^static int try_mount(mvp)$/
try_nfsx_mount	nfsx_ops.c	/^static int try_nfsx_mount(mv)$/
ufs_fmount	ufs_ops.c	/^static int ufs_fmount(mf)$/
ufs_fumount	ufs_ops.c	/^static int ufs_fumount(mf)$/
ufs_match	ufs_ops.c	/^static char *ufs_match(fo)$/
umount_exported	map.c	/^void umount_exported(P_void)$/
umount_fs	umount_fs.c	/^int umount_fs(fs_name)$/
uninit_mntfs	mntfs.c	/^static void uninit_mntfs(mf, rmd)$/
union_init	info_union.c	/^int union_init(map, tp)$/
union_mounted	afs_ops.c	/^static void union_mounted(mf)$/
union_reload	info_union.c	/^int union_reload(m, map, fn)$/
union_search	info_union.c	/^int union_search(m, map, key, pval, tp)$/
unlink_or_rmdir	nfs_subr.c	/^unlink_or_rmdir(argp, rqstp, unlinkp)$/
unmount_mp	map.c	/^static int unmount_mp(mp)$/
unmount_node	map.c	/^static int unmount_node(mp)$/
unmount_node_wrap	map.c	/^static int unmount_node_wrap(vp)$/
untimeout	clock.c	/^void untimeout(id)$/
unx_error	nfs_ops.c	/^#define unx_error(e)	((int)(e))$/
valid_key	util.c	/^int valid_key(key)$/
wakeup	sched.c	/^void wakeup(wchan)$/
wakeup_srvr	srvr_afs.c	/^void wakeup_srvr(fs)$/
wakeup_task	sched.c	/^void wakeup_task(rc, term, cl)$/
wakeupjob	sched.c	/^static void wakeupjob(p)$/
xdr_amq_mount_info_qelem	amq_subr.c	/^xdr_amq_mount_info_qelem(xdrs, qhead)$/
xdr_amq_mount_stats	amq_subr.c	/^xdr_amq_mount_stats(xdrs, objp)$/
xdr_amq_mount_subtree	amq_subr.c	/^xdr_amq_mount_subtree(xdrs, objp)$/
xdr_amq_mount_tree	amq_subr.c	/^xdr_amq_mount_tree(xdrs, objp)$/
xdr_amq_mount_tree_list	amq_subr.c	/^xdr_amq_mount_tree_list(xdrs, objp)$/
xdr_amq_mount_tree_node	amq_subr.c	/^xdr_amq_mount_tree_node(xdrs, objp)$/
xdr_amq_mount_tree_p	amq_subr.c	/^xdr_amq_mount_tree_p(xdrs, objp)$/
xdr_amq_setopt	amq_subr.c	/^xdr_amq_setopt(xdrs, objp)$/
xdr_amq_string	amq_subr.c	/^xdr_amq_string(xdrs, objp)$/
xdr_attrstat	../rpcx/nfs_prot_xdr.c	/^xdr_attrstat(xdrs, objp)$/
xdr_createargs	../rpcx/nfs_prot_xdr.c	/^xdr_createargs(xdrs, objp)$/
xdr_dirlist	../rpcx/nfs_prot_xdr.c	/^xdr_dirlist(xdrs, objp)$/
xdr_diropargs	../rpcx/nfs_prot_xdr.c	/^xdr_diropargs(xdrs, objp)$/
xdr_diropokres	../rpcx/nfs_prot_xdr.c	/^xdr_diropokres(xdrs, objp)$/
xdr_diropres	../rpcx/nfs_prot_xdr.c	/^xdr_diropres(xdrs, objp)$/
xdr_dirpath	../rpcx/mount_xdr.c	/^xdr_dirpath(xdrs, objp)$/
xdr_entry	../rpcx/nfs_prot_xdr.c	/^xdr_entry(xdrs, objp)$/
xdr_exportnode	../rpcx/mount_xdr.c	/^xdr_exportnode(xdrs, objp)$/
xdr_exports	../rpcx/mount_xdr.c	/^xdr_exports(xdrs, objp)$/
xdr_fattr	../rpcx/nfs_prot_xdr.c	/^xdr_fattr(xdrs, objp)$/
xdr_fhandle	../rpcx/mount_xdr.c	/^xdr_fhandle(xdrs, objp)$/
xdr_fhstatus	../rpcx/mount_xdr.c	/^xdr_fhstatus(xdrs, objp)$/
xdr_filename	../rpcx/nfs_prot_xdr.c	/^xdr_filename(xdrs, objp)$/
xdr_ftype	../rpcx/nfs_prot_xdr.c	/^xdr_ftype(xdrs, objp)$/
xdr_groupnode	../rpcx/mount_xdr.c	/^xdr_groupnode(xdrs, objp)$/
xdr_groups	../rpcx/mount_xdr.c	/^xdr_groups(xdrs, objp)$/
xdr_linkargs	../rpcx/nfs_prot_xdr.c	/^xdr_linkargs(xdrs, objp)$/
xdr_mountbody	../rpcx/mount_xdr.c	/^xdr_mountbody(xdrs, objp)$/
xdr_mountlist	../rpcx/mount_xdr.c	/^xdr_mountlist(xdrs, objp)$/
xdr_name	../rpcx/mount_xdr.c	/^xdr_name(xdrs, objp)$/
xdr_nfs_fh	../rpcx/nfs_prot_xdr.c	/^xdr_nfs_fh(xdrs, objp)$/
xdr_nfscookie	../rpcx/nfs_prot_xdr.c	/^xdr_nfscookie(xdrs, objp)$/
xdr_nfspath	../rpcx/nfs_prot_xdr.c	/^xdr_nfspath(xdrs, objp)$/
xdr_nfsstat	../rpcx/nfs_prot_xdr.c	/^xdr_nfsstat(xdrs, objp)$/
xdr_nfstime	../rpcx/nfs_prot_xdr.c	/^xdr_nfstime(xdrs, objp)$/
xdr_pointer	misc_rpc.c	/^xdr_pointer(xdrs,objpp,obj_size,xdr_obj)$/
xdr_pri_free	host_ops.c	/^xdr_pri_free(xdr_args, args_ptr)$/
xdr_readargs	../rpcx/nfs_prot_xdr.c	/^xdr_readargs(xdrs, objp)$/
xdr_readdirargs	../rpcx/nfs_prot_xdr.c	/^xdr_readdirargs(xdrs, objp)$/
xdr_readdirres	../rpcx/nfs_prot_xdr.c	/^xdr_readdirres(xdrs, objp)$/
xdr_readlinkres	../rpcx/nfs_prot_xdr.c	/^xdr_readlinkres(xdrs, objp)$/
xdr_readokres	../rpcx/nfs_prot_xdr.c	/^xdr_readokres(xdrs, objp)$/
xdr_readres	../rpcx/nfs_prot_xdr.c	/^xdr_readres(xdrs, objp)$/
xdr_renameargs	../rpcx/nfs_prot_xdr.c	/^xdr_renameargs(xdrs, objp)$/
xdr_sattr	../rpcx/nfs_prot_xdr.c	/^xdr_sattr(xdrs, objp)$/
xdr_sattrargs	../rpcx/nfs_prot_xdr.c	/^xdr_sattrargs(xdrs, objp)$/
xdr_statfsokres	../rpcx/nfs_prot_xdr.c	/^xdr_statfsokres(xdrs, objp)$/
xdr_statfsres	../rpcx/nfs_prot_xdr.c	/^xdr_statfsres(xdrs, objp)$/
xdr_symlinkargs	../rpcx/nfs_prot_xdr.c	/^xdr_symlinkargs(xdrs, objp)$/
xdr_writeargs	../rpcx/nfs_prot_xdr.c	/^xdr_writeargs(xdrs, objp)$/
xfree	xutil.c	/^xfree(f, l, p)$/
xmalloc	xutil.c	/^voidp xmalloc(len)$/
xrealloc	xutil.c	/^voidp xrealloc(ptr, len)$/
