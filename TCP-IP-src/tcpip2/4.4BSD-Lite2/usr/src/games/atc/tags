DAY	log.c	/^#define DAY(t)		((t) \/ SECADAY)$/
DEF_STATE	input.c	/^#define DEF_STATE(s)	{ NUMELS(s),	(s)	}$/
HOUR	log.c	/^#define HOUR(t)		(((t) % SECADAY) \/ SECAHOUR)$/
Left	input.c	/^Left(c)$/
MIN	log.c	/^#define MIN(t)		(((t) % SECAHOUR) \/ SECAMIN)$/
Mmain	main.c	/^main(ac, av)$/
NUMELS	input.c	/^#define NUMELS(a)	(sizeof (a) \/ sizeof (*(a)))$/
Right	input.c	/^Right(c)$/
SEC	log.c	/^#define SEC(t)		((t) % SECAMIN)$/
YY_FATAL_ERROR	lex.c	/^#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )$/
YY_INPUT	lex.c	/^#define YY_INPUT(buf,result,max_size) \\$/
YY_PROTO	lex.c	/^#define YY_PROTO(proto) proto$/
YY_SC_TO_UI	lex.c	/^#define YY_SC_TO_UI(c) ((unsigned int) (unsigned c/
YY_STATE_EOF	lex.c	/^#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + st/
addplane	update.c	/^addplane()$/
airport	input.c	/^airport(c)$/
append	list.c	/^append(l, p)$/
beacon	input.c	/^beacon(c)$/
benum	input.c	/^benum(c)$/
check_adir	grammar.c	/^check_adir(x, y, dir)$/
check_edge	grammar.c	/^check_edge(x, y)$/
check_edir	grammar.c	/^check_edir(x, y, dir)$/
check_line	grammar.c	/^check_line(x1, y1, x2, y2)$/
check_linepoint	grammar.c	/^check_linepoint(x, y)$/
check_point	grammar.c	/^check_point(x, y)$/
checkdefs	grammar.c	/^checkdefs()$/
circle	input.c	/^circle(c)$/
climb	input.c	/^climb(c)$/
command	update.c	/^command(pp)$/
compar	log.c	/^compar(a, b)$/
default_game	main.c	/^default_game()$/
delayb	input.c	/^delayb(c)$/
delete	list.c	/^delete(l, p)$/
descend	input.c	/^descend(c)$/
dir_deg	update.c	/^dir_deg(d)$/
dir_no	input.c	/^dir_no(ch)$/
done_screen	graphics.c	/^done_screen()$/
draw_all	graphics.c	/^draw_all()$/
draw_line	graphics.c	/^draw_line(w, x, y, lx, ly, s)$/
erase_all	graphics.c	/^erase_all()$/
ex_it	input.c	/^ex_it(c)$/
findplane	update.c	/^findplane(n)$/
getAChar	graphics.c	/^getAChar()$/
getcommand	input.c	/^getcommand()$/
gettoken	input.c	/^gettoken()$/
ignore	input.c	/^ignore(c)$/
init_gr	graphics.c	/^init_gr()$/
ioaddstr	graphics.c	/^ioaddstr(pos, str)$/
ioclrtobot	graphics.c	/^ioclrtobot()$/
ioclrtoeol	graphics.c	/^ioclrtoeol(pos)$/
ioerror	graphics.c	/^ioerror(pos, len, str)$/
iomove	graphics.c	/^iomove(pos)$/
left	input.c	/^left(c)$/
list_games	main.c	/^list_games()$/
log_score	log.c	/^log_score(list_em)$/
loser	graphics.c	/^loser(p, s)$/
mark	input.c	/^mark(c)$/
name	update.c	/^name(p)$/
newplane	list.c	/^newplane()$/
next_plane	update.c	/^next_plane()$/
noise	input.c	/^noise()$/
number	update.c	/^number(l)$/
okay_game	main.c	/^okay_game(s)$/
planewin	graphics.c	/^planewin()$/
pop	input.c	/^pop()$/
push	input.c	/^push(ruleno, ch)$/
quit	graphics.c	/^quit()$/
read_file	main.c	/^read_file(s)$/
redraw	graphics.c	/^redraw()$/
rel_dir	input.c	/^rel_dir(c)$/
rezero	input.c	/^rezero()$/
right	input.c	/^right(c)$/
setalt	input.c	/^setalt(c)$/
setplane	input.c	/^setplane(c)$/
setrelalt	input.c	/^setrelalt(c)$/
setup_screen	graphics.c	/^setup_screen(scp)$/
timestr	log.c	/^timestr(t)$/
to_dir	input.c	/^to_dir(c)$/
too_close	update.c	/^too_close(p1, p2, dist)$/
turn	input.c	/^turn(c)$/
unmark	input.c	/^unmark(c)$/
unput	lex.c	/^#define unput(c) yyunput( c, yytext_ptr )$/
update	update.c	/^update()$/
yy_create_buffer	lex.c	/^YY_BUFFER_STATE yy_create_buffer( file, size )$/
yy_delete_buffer	lex.c	/^void yy_delete_buffer( b )$/
yy_fatal_error	lex.c	/^static void yy_fatal_error( msg )$/
yy_flex_alloc	lex.c	/^static void *yy_flex_alloc( size )$/
yy_flex_free	lex.c	/^static void yy_flex_free( ptr )$/
yy_flex_realloc	lex.c	/^static void *yy_flex_realloc( ptr, size )$/
yy_flex_strcpy	lex.c	/^static void yy_flex_strcpy( s1, s2 )$/
yy_get_next_buffer	lex.c	/^static int yy_get_next_buffer()$/
yy_get_previous_state	lex.c	/^static yy_state_type yy_get_previous_state()$/
yy_init_buffer	lex.c	/^void yy_init_buffer( b, file )$/
yy_pop_state	lex.c	/^static void yy_pop_state()$/
yy_push_state	lex.c	/^static void yy_push_state( new_state )$/
yy_switch_to_buffer	lex.c	/^void yy_switch_to_buffer( new_buffer )$/
yy_top_state	lex.c	/^static int yy_top_state()$/
yy_try_NUL_trans	lex.c	/^static yy_state_type yy_try_NUL_trans( yy_current_/
yyerror	grammar.c	/^yyerror(s)$/
yyless	lex.c	/^#define yyless(n) \\$/
yymore	lex.c	/^#define yymore() yymore_used_but_not_detected$/
yyparse	grammar.c	/^yyparse()$/
yyrestart	lex.c	/^void yyrestart( input_file )$/
yyterminate	lex.c	/^#define yyterminate() return YY_NULL$/
yyunput	lex.c	/^static void yyunput( c, yy_bp )$/
