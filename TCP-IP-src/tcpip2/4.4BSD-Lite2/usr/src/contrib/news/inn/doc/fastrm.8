.\" $Revision $
.TH FASTRM 1
.SH NAME
fastrm \- quickly remove a set of files
.SH SYNOPSIS
.B fastrm
[
.B \-d
]
[
.B \-e
]
[
.BI \-u N
]
[
.BI \-s M
]
[
.BI \-c I
]
.I base_directory
.SH DESCRIPTION
.I Fastrm
reads a list of files, one per line, from its standard input and removes them.
If a file is not an absolute pathname, it is taken relative to the directory
specified on the command line.
The
.I base_directory
parameter must be a simple absolute pathname \(em that is, it must not
contain any ``/./'' or ``/../'' references.
.PP
.I Fastrm
is designed to be faster than the typical ``|\ xargs\ rm'' pipeline.
For example,
.I fastrm
will usually
.IR chdir (2)
into a directory before removing files from it.
If the input is sorted, this means that most files to be removed will
be simple names.
.PP
.I Fastrm
assumes that its input is valid and that it is safe to just do an
.IR unlink (2)
call for each item to be removed.
As a safety measure, if
.I fastrm
is run by root it will first
.IR stat (2)
the item to make sure that it is not a directory before unlinking it.
.PP
If the ``\-d'' flag is used then no files are removed.
Instead a list of the files to be removed, in debug form, is printed
on the standard output.
Each line contains either the current directory of
.I fastrm
at the time it would do the unlink, and then the path name it
would pass to
.IR unlink (2)
as two fields separated by white space and a ``/'', or
the absolute path name (a single field) of files it would unlink
using the absolute path name.
.PP
If the ``\-e'' flag is used,
.I fastrm
will treat an empty input file (\fBstdin\fP) as an error.
This is most useful when 
.I fastrm
is last in a pipeline after a preceding
.BR sort (1)
as if the sort fails, there will usually be no output to become
input of
.IR fastrm .
.PP
If the ``\-u'' flag is used, then
.I fastrm
makes further assumptions about its work environment; in particular, that
there are no symbolic links in the target tree.
This flag also suggests that it is probably faster to reference the path
.I \&``../../../''
.\" I'm not all that convinced of the utility of using italics for dots...
rather than start from the root and come down.
(Note that this probably isn't true on systems that have a namei cache,
which usually holds everything except
.IR \&``..'' ).
The optional
.I N
is an integer that specifies the maximum number of
.I \&``..''
segments to use \(em paths that would use more than this use the
absolute path name (from the root) instead.
If the ``\-u'' flag is given without a value, ``\-u1'' is assumed.
.PP
If the ``\-s'' flag is used, then
.I fastrm
will perform the unlinks from one directory \(em that is when a group of
files in one directory appear in the input consecutively \(em in the
order that the files appear in the directory from which they are to be
removed.
The intent of this flag is that on systems that have a per-process
directory cache, finding files in the directory should be faster.
It can have smaller benefits on other systems.
The optional
.I M
is an integer that specifies the number of files that must be going
to be removed from one directory before the files will be ordered.
If the ``\-s'' flag is given without a value, ``\-s5'' is assumed.
When the directory reordering is in use
.I fastrm
will avoid attempting to unlink files that it can't see in the
directory, which can speed it appreciably when many of the file
names have already been removed.
.PP
.PP
The ``\-c'' flag may be given to instruct
.I fastrm
when it should
.IR chdir (2).
If the number of files to be unlinked from a directory is at least
.I I
then
.I fastrm
will
.I chdir
and unlink the files from in the directory.
Otherwise it will build a path relative to its current directory.
If ``\-c'' is given without the optional integer
.I I
then ``\-c1'' is assumed, which will cause
.I fastrm
to always use
.IR chdir .
If ``\-c'' is not used at all, then ``\-c3'' is assumed.
Use ``\-c0'' to prevent
.I fastrm
from ever using
.IR chdir (2).
.PP
There are also ``\-a'' and ``\-r'' options, which do nothing at all, except
allow you to say ``fastrm \-usa'' ``fastrm \-ussr'' or ``fastrm \-user''.
These happen to often be convenient sets of options to use.
.PP
.I Fastrm
exits with a status of zero if there were no problems, or one if something
went wrong.
Attempting to remove a file that does not exist is not considered a problem.
If the program exits with a non-zero status, it is probably a good idea to
feed the list of files into an ``xargs\ rm'' pipeline.
.SH HISTORY
.de R$
This is revision \\$3, dated \\$4.
..
.R$ $Id: fastrm.8,v 1.2 1993/01/29 16:42:44 rsalz Exp $
