t/base:

cond.t
if.t
lex.t
pat.t
term.t

all of these pass. if you are running from this directory
make sure you have a file ..\Makefile for term.t to pass.

=================================

t/cmd:

elsif.t
for.t
mod.t
subval.t
switch.t
while.t

all of these passed. be sure to set UNIXMODE for these to pass.
make sure there is a file called ./TEST if you run in this sub-directory
for mod.t.

=================================

t/comp:

cmdopt.t
decl.t
package.t
script.t
term.t
multiline.t

all these work. if you are running in this subdir then cp perl.ttp ./perl
before running.

cpp.t
 fails. i need to fix for -P.
=================================

t/io:

if you are running in this subdir make sure:
-- there is a file ../Makefile
-- have a ./perl

argv.t: 2 & 3 fail
	`.....` with pipes will not work. redirections may (have'nt checked)

dup.t: only 1 will pass. what the hell is the rest doing (the atari goes
	into in infinite loop)

pipe.t: fails. have to look into this. pipe() on the atari sort of
work most of the time. see gcc-lib/pipe.c

print.t: all pass
tell.t: all pass
=================================

t/lib:

bit.t : pass
=================================

t/op:

append.t	pass
array.t		pass
auto.t		pass
chop.t		pass
cond.t		pass
dbm.t -- cant possibly work with gdbm, it does'nt create .pag etc files
gdbm.t		added new test to test gdbm based perl
delete.t	pass
do.t		pass
each.t		pass
eval.t		pass
exec.t 4,5,6 fail rest pass (obviously)
exp.t		pass
flip.t		pass
fork.t		correctly fails
glob.t	1 fails rest pass (as i said dont depend on `....` to work on the ST)
goto.t  1,2 pass 3 fail (again because of `...`)
groups.t	makes no sense on the ST
index.t		pass
int.t		pass
join.t		pass
list.t		pass
local.t		pass
magic.t		fail obviously
mkdir.t	the failure is obvious, rest pass (our err strings dont match unix's)
oct.t		pass
ord.t		pass
pack.t		pass
pat.t		pass!!!! (works with lib malloc too now, yeah!)
push.t		pass
range.t		pass
read.t		pass
regexp.t	pass! (make sure re_tests is in cwd if running in cwd, and edit
			path in regexp.t)
repeat.t	pass
s.t		pass
sleep.t		pass
sort.t		pass
split.t		pass
sprintf.t	pass
stat.t		obvious ones fail, looks good
study.t		pass
substr.t	pass
time.t		pass
undef.t		pass
unshift.t	pass
vec.t		pass
write.t	fail due to  `...`
=================================

