# Copyright (c) 1994 David I. Bell
# Permission is granted to use, distribute, or modify this source,
# provided that this copyright notice remains intact.
#
# Arbitrary precision calculator.

I am allowing this calculator to be freely distributed for personal uses.
Like all multi-precision programs, you should not depend absolutely on
its results, since bugs in such programs can be insidious and only rarely 
show up.
  
-dbell-

p.s. By Landon Curt Noll

Building calc in 3 easy steps:

    1) Look at the makefile, and adjust it to suit your needs.

       Here are some Makefile hints:

	   In the past, some people have had to adjust the VARARG or
	   TERMCONTROL because the Makefile cannot always guess
	   correctly for certain systems.  You may need to play with
	   these values if you experience problems.

	   The default compiler used is 'cc'.  The default compiler flag 
	   is '-O'.  If you have gcc, or gcc v2 (or better) you should use
	   that instead.   Some compilers allow for optimization beyond
	   just -O (gcc v2 has -O2, mips cc has -O3).  You should select
	   the best flag for speed optimization.  Calc can be cpu intensive
	   so selecting a quality compiler and good optimization level can
	   really pay off.

    2) build calc:

	make all

    3) test calc:

	make check

For further reading:

    LIBRARY
    	explains how programs can use libcalc.a to take advantage 
	of the calc multi-precision routines.  

    help/todo
	current wish list for calc

    CHANGES
	recent changes to calc

    BUGS 
	known bugs and mis-features
    
    help/full
	full set of calc documentation

If you find bugs (better yet if you have bug fixes); or if you have
suggested changes (better yet if you have patches), send them to:

    dbell@canb.auug.org.au
    chongo@toad.com		    {uunet,pyramid,sun}!hoptoad!chongo
