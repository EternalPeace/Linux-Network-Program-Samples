#    Makefile template for Configure for the BFD library.
#    Copyright (C) 1990, 1991, 1992 Free Software Foundation, Inc.
#    Written by Cygnus Support.
# 
# This file is part of BFD, the Binary File Descriptor library.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

srcdir = .

prefix = /usr/local

exec_prefix = $(prefix)
bindir = $(exec_prefix)/bin
libdir = $(exec_prefix)/lib

datadir = $(prefix)/lib
mandir = $(prefix)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(prefix)/info
includedir = $(prefix)/include
oldincludedir =
docdir = doc

SHELL = /bin/sh

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = ar
AR_FLAGS = qc
CFLAGS = -g -O
BISON = bison
MAKEINFO = makeinfo
RANLIB = ranlib

INCDIR = $(srcdir)/../include
CSEARCH = -I. -I$(srcdir) -I$(INCDIR)
DEP = mkdep

SUBDIRS = doc


# Change this (to MINIMIZE=1) to save space in executables.
# Currently, all this does is control the target_vector in targets.c.
MINIMIZE=1

TARGETLIB = libbfd.a


BFD_LIBS = libbfd.o opncls.o bfd.o archive.o targets.o cache.o \
	archures.o core.o section.o format.o syms.o reloc.o init.o ctor.o seclet.o

#BFD_MACHINES = cpu-h8300.o cpu-i960.o cpu-sparc.o cpu-m68k.o cpu-m88k.o \
#	cpu-vax.o cpu-mips.o cpu-a29k.o cpu-i386.o cpu-rs6000.o cpu-hppa.o \
#	cpu-z8k.o cpu-we32k.o

#BFD_BACKENDS = oasys.o ieee.o srec.o elf.o stab-syms.o\
#	aout64.o aout32.o demo64.o sunos.o newsos3.o i386aout.o bout.o \
#	aout-adobe.o \
#	coff-i960.o coff-a29k.o coff-m68k.o coff-i386.o coff-m88k.o \
#	coff-mips.o coff-rs6000.o coff-h8300.o coff-msym.o hppa.o i386linux.o \
#	coff-z8k.o coff-we32k.o i386bsd.o
BFD_BACKENDS = aout32.o stab-syms.o sunos.o

OPTIONAL_BACKENDS = trad-core.o

#### host and target dependent Makefile fragments come in here.
###

FLAGS_TO_PASS = \
	"against=$(against)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CFLAGS=$(CFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"MAKEINFO=$(MAKEINFO)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)" \
	"BISON=$(BISON)"

.c.o:
	$(CC) -c $(CFLAGS) $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) $<

BFD_H=$(INCDIR)/bfd.h

# C source files that correspond to .o's.
CFILES = libbfd.c opncls.c bfd.c archive.c targets.c cache.c archures.c \
	 coff-i386.c aout64.c aout32.c sunos.c demo64.c coff-i960.c srec.c tekhex.c \
	 oasys.c ieee.c coff-m68k.c coff-a29k.c coff-rs6000.c coff-msym.c \
	 format.c section.c core.c syms.c stab-syms.c reloc.c init.c ctor.c \
	 seclet.c coff-m88k.c coff-mips.c trad-core.c newsos3.c i386aout.c \
	 i386linux.c bout.c elf.c aout-adobe.c coff-we32k.c i386bsd.c \
	 cpu-h8300.c cpu-i960.c cpu-sparc.c cpu-m68k.c cpu-m88k.c cpu-vax.c \
	 cpu-mips.c cpu-a29k.c cpu-i386.c cpu-rs6000.c coff-h8300.c hppa.c \
	 cpu-hppa.c cpu-we32k.c

STAGESTUFF = $(TARGETLIB) $(OFILES)

all: Makefile $(TARGETLIB) 
	@$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

.NOEXPORT:

check:

info: force
	@$(MAKE) subdir_do DO=info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

clean-info:
	@$(MAKE) subdir_do DO=clean-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	
install-info: force
	@$(MAKE) subdir_do DO=install-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

# HDEPFILES comes from the host config; TDEPFILES from the target config.
OFILES = $(BFD_LIBS) $(BFD_BACKENDS) $(BFD_MACHINES) $(HDEPFILES) $(TDEPFILES)

$(TARGETLIB): $(OFILES)
	 rm -f $(TARGETLIB)
	 $(AR) $(AR_FLAGS) $(TARGETLIB) $(OFILES)
	 $(RANLIB) $(TARGETLIB)

# When compiling archures.c and targets.c, supply the default target
# info from configure.


targets.o: targets.c
	$(CC) $(CFLAGS) -c $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) -DMINIMIZE=$(MINIMIZE) $(TDEFAULTS) $<

archures.o: archures.c
	$(CC) $(CFLAGS) -c $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) -DMINIMIZE=$(MINIMIZE) $(TDEFAULTS) $<

subdir_do: force
	@for i in $(DODIRS); do \
		if [ -d ./$$i ] ; then \
			if (cd ./$$i; \
				$(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

tags etags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.h $(srcdir)/*.c

do_mostlyclean:
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout
do_clean: do_mostlyclean
	rm -f libbfd.a TAGS
do_distclean: do_clean
	rm -f Makefile config.status
do_realclean: do_distclean

mostlyclean: do_mostlyclean
	$(MAKE) subdir_do DO=mostlyclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
clean: do_clean
	$(MAKE) subdir_do DO=clean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
distclean: do_distclean
	$(MAKE) subdir_do DO=distclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
clobber realclean: do_readlclean
	$(MAKE) subdir_do DO=realclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

# Mark everything as depending on config.status, since the timestamp on
# sysdep.h might actually move backwards if we reconfig and relink it
# to a different hosts/h-xxx.h file.  This will force a recompile anyway.
RECONFIG = config.status
$(BFD_LIBS):  libbfd.h $(BFD_H) $(RECONFIG)
$(BFD_MACHINES):  libbfd.h $(BFD_H) $(RECONFIG)
$(BFD_BACKENDS):  libbfd.h $(BFD_H) $(RECONFIG)
$(OPTIONAL_BACKENDS):  libbfd.h $(BFD_H) $(RECONFIG)

# Get around a Sun Make bug in SunOS 4.1.1 with VPATH
cpu-i386.o:cpu-i386.c
cpu-z8k.o: cpu-z8k.c
coff-z8k.o: coff-z8k.c
cpu-we32k.o: cpu-we32k.c
coff-we32k.o: coff-we32k.c

saber:
	#suppress 65 on bfd_map_over_sections 
	#suppress 66 on bfd_map_over_sections 
	#suppress 67 on bfd_map_over_sections 
	#suppress 68 on bfd_map_over_sections 
	#suppress 69 on bfd_map_over_sections 
	#suppress 70 on bfd_map_over_sections 
	#suppress 110 in bfd_map_over_sections 
	#suppress 112 in bfd_map_over_sections 
	#suppress 530 
	#suppress 590 in swap_exec_header 
	#suppress 590 in _bfd_dummy_core_file_matches_executable_p 
	#suppress 590 in bfd_dont_truncate_arname
	#suppress 590 on ignore 
	#suppress 590 on abfd 
	#setopt load_flags $(CFLAGS)
	#load $(CFILES)


#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# This target should be invoked before building a new release.
# 'VERSION' file must be present and contain a string of the form "x.y"
#
roll:
	@V=`cat VERSION`		; \
	MAJ=`sed 's/\..*//' VERSION`	; \
	MIN=`sed 's/.*\.//' VERSION`	; \
	V=$$MAJ.`expr $$MIN + 1`	; \
	rm -f VERSION			; \
	echo $$V >VERSION		; \
	echo Version $$V

# Dummy target to force execution of dependent targets.
#
force:

install:
	-parent=`echo $(libdir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(libdir) ] ; then true ; else mkdir $(libdir) ; fi
	$(INSTALL_DATA) libbfd.a $(libdir)/libbfd.a
	$(RANLIB) $(libdir)/libbfd.a
	-parent=`echo $(includedir)|sed -e 's@/[^/]*$$@@'`; \
	if [ -d $$parent ] ; then true ; else mkdir $$parent ; fi
	-if [ -d $(includedir) ] ; then true ; else mkdir $(includedir) ; fi
	$(INSTALL_DATA) $(INCDIR)/bfd.h $(includedir)/bfd.h
	-if [ -z "$(oldincludedir)" ] ; then true ; else if [ -d $(oldincludedir) ] ; then true ; else mkdir $(oldincludedir) ; fi ; $(INSTALL_DATA) $(INCDIR)/bfd.h $(oldincludedir)/bfd.h ; fi
	@$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)


Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

dep: $(CFILES)
	mkdep $(CFLAGS) $?

host-aout.o: Makefile

# The following program can be used to generate a simple config file
# which can be folded into an h-XXX file for a new host, with some editing.
aout-params.h: gen-aout
	./gen-aout > aout-params.h
gen-aout: $(srcdir)/gen-aout.c Makefile
	$(CC) -o gen-aout $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c

headers:
	(cd $(docdir); $(MAKE) protos $(FLAGS_TO_PASS))
	# Could really use a "copy-if-change"...
	cp $(docdir)/bfd.h bfd.h-new
	$(srcdir)/../move-if-change bfd.h-new $(BFD_H)
	cp $(docdir)/libbfd.h libbfd.h-new
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	cp $(docdir)/libcoff.h libcoff.h-new
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

bfd.info:
	(cd $(docdir); $(MAKE) bfd.info $(FLAGS_TO_PASS))

bfd.dvi:
	(cd $(docdir); $(MAKE) bfd.dvi $(FLAGS_TO_PASS))

bfd.ps: 
	(cd $(docdir); $(MAKE) bfd.ps $(FLAGS_TO_PASS))

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.

libbfd.o : libbfd.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
opncls.o : opncls.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
bfd.o : bfd.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
archive.o : archive.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h 
targets.o : targets.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
cache.o : cache.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
archures.o : archures.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h 
aout64.o : aout64.c 
aout32.o : aout32.c aoutx.h $(INCDIR)/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h libaout.h libbfd.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h 
sunos.o : sunos.c aoutf1.h $(INCDIR)/bfd.h $(INCDIR)/obstack.h \
  libaout.h libbfd.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h 
demo64.o : demo64.c 

srec.o : srec.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
oasys.o : oasys.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/oasys.h liboasys.h 
ieee.o : ieee.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/ieee.h libieee.h 
coff-h8300.o: coff-h8300.c  $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-a29k.o: coff-a29k.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-i386.o: coff-i386.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-i960.o: coff-i960.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-m68k.o: coff-m68k.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-m88k.o: coff-m88k.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-mips.o: coff-mips.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/mips.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
coff-rs6000.o: coff-rs6000.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/rs6000.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
format.o : format.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
section.o : section.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
core.o : core.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
syms.o : syms.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
syms.o : stab-syms.c
reloc.o : reloc.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 

trad-core.o : trad-core.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h \
  libbfd.h libaout.h 

coff-msym.o: coff-msym.c $(INCDIR)/bfd.h  $(INCDIR)/coff/ecoff-ext.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h

newsos3.o : newsos3.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386aout.o : i386aout.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386linux.o : i386linux.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h
i386bsd.o : i386bsd.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
bout.o : bout.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h

# IF YOU PUT ANYTHING HERE IT WILL GO AWAY

