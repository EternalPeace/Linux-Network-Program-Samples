# This file was generated automatically by configure. Do not edit.
target_makefile_frag = ./config/mt-h8300-coff
host_makefile_frag =
CROSS=-DCROSS_COMPILE
ALL=all.cross
host_alias = sun4
host_cpu = sparc
host_vendor = sun
host_os = sunos411
version_path = 
target_alias = h8300hds
target_cpu = h8300
target_vendor = hitachi
target_os = hds
subdir =
unsubdir = .
VPATH = .
#    Makefile template for Configure for the BFD library.
#    Copyright (C) 1990, 1991 Free Software Foundation, Inc.
#    Written by Cygnus Support.
# 
# This file is part of BFD, the Binary File Descriptor library.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

srcdir = .

prefix = /usr/local

bindir = $(prefix)/bin
datadir = $(prefix)/lib
libdir = $(prefix)/lib
mandir = $(datadir)/man
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = $(datadir)/info
includedir = $(prefix)/include
docdir = $(srcdir)/doc

SHELL = /bin/sh

INSTALL = install -c
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

AR = ar
AR_FLAGS = qv
BISON = bison
MAKEINFO = makeinfo
RANLIB = ar rvs

INCDIR = $(srcdir)/../include
CSEARCH = -I. -I$(srcdir) -I$(INCDIR)
DEP = mkdep

SUBDIRS = doc


# Change this (to MINIMIZE=1) to save space in executables.
# Currently, all this does is control the target_vector in targets.c.
MINIMIZE=0

TARGETLIB = libbfd.a
CFLAGS = -g -O $(HDEFINES) $(TDEFINES) $(CSEARCH) $(CSWITCHES) # -DINTEL960VERSION


BFD_LIBS = libbfd.o opncls.o bfd.o archive.o targets.o cache.o \
	archures.o core.o section.o format.o syms.o reloc.o init.o ctor.o seclet.o

BFD_MACHINES = cpu-h8300.o 


BFD_BACKENDS = ieee.o srec.o coff-h83.o




OPTIONAL_BACKENDS = trad-core.o

#### host and target dependent Makefile fragments come in here.
# Target: Hitachi H8/300 using COFF and IEEE-695 object file format
# Avoid dragging in a lot of other architectures and formats.
HDEFINES=-D__MSDOS__ -D__GO32__
TDEFAULTS=-DBFD -DSELECT_ARCHITECTURES=bfd_h8300_arch -DSELECT_VECS=&ieee_vec\,&srec_vec\,&h8300coff_vec
CC=gcc
###

BFD_H=$(INCDIR)/bfd.h

# C source files that correspond to .o's.
CFILES = libbfd.c opncls.c bfd.c archive.c targets.c cache.c archures.c \
	 coff-i386.c aout64.c aout32.c sunos.c demo64.c coff-i960.c srec.c \
	 oasys.c ieee.c coff-m68k.c coff-a29k.c coff-rs6000.c \
	 format.c section.c core.c syms.c  reloc.c init.c ctor.c seclet.c \
	 coff-m88k.c coff-mips.c trad-core.c newsos3.c i386aout.c bout.c elf.c \
	cpu-h8300.c cpu-i960.c cpu-sparc.c cpu-m68k.c cpu-m88k.c \
 	cpu-vax.c cpu-mips.c cpu-a29k.c cpu-i386.c cpu-rs6000.c coff-h83.c

STAGESTUFF = $(TARGETLIB) $(OFILES)

all: $(TARGETLIB)

#	$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS)"

info: force
	$(MAKE) subdir_do DO=info "DODIRS=$(SUBDIRS)"

install-info: force
	$(MAKE) subdir_do DO=install-info "DODIRS=$(SUBDIRS)"

# HDEPFILES comes from the host config; TDEPFILES from the target config.
OFILES = $(BFD_LIBS) $(BFD_BACKENDS) $(BFD_MACHINES) $(HDEPFILES) $(TDEPFILES)

$(TARGETLIB): $(OFILES)
	 -rm -f $(TARGETLIB)
	 >bfd.rf $(AR_FLAGS) $(TARGETLIB) $(OFILES)
	 $(AR) @bfd.rf
	 $(RANLIB) $(TARGETLIB)

# When compiling targets.c, supply the default target info from configure.
targets.o: targets.c
	>targets.rf $(CFLAGS) -c -DMINIMIZE=$(MINIMIZE) $(TDEFAULTS) targets.c
	$(CC) @targets.rf

subdir_do: force
	for i in $(DODIRS); do \
		if [ -d $(unsubdir)/$$i ] ; then \
			if (cd $(unsubdir)/$$i$(subdir); \
				$(MAKE) \
					"against=$(against)" \
					"AR=$(AR)" \
					"AR_FLAGS=$(AR_FLAGS)" \
					"CC=$(CC)" \
					"RANLIB=$(RANLIB)" \
					"BISON=$(BISON)" $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

stage1: force
	- mkdir stage1
	- mv -f $(STAGESTUFF) stage1
	$(MAKE) subdir_do DO=stage1 "DODIRS=$(SUBDIRS)"

stage2: force
	- mkdir stage2
	- mv -f $(STAGESTUFF) stage2
	$(MAKE) subdir_do DO=stage2 "DODIRS=$(SUBDIRS)"

stage3: force
	- mkdir stage3
	- mv -f $(STAGESTUFF) stage3
	$(MAKE) subdir_do DO=stage3 "DODIRS=$(SUBDIRS)"

against=stage2

comparison: force
	for i in *.o ; do cmp $$i $(against)/$$i || exit 1 ; done
	$(MAKE) subdir_do DO=comparison "DODIRS=$(SUBDIRS)"

de-stage1: force
	- (cd stage1 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage1
	$(MAKE) subdir_do DO=de-stage1 "DODIRS=$(SUBDIRS)"

de-stage2: force
	- (cd stage2 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage2
	$(MAKE) subdir_do DO=de-stage2 "DODIRS=$(SUBDIRS)"

de-stage3: force
	- (cd stage3 ; mv -f $(STAGESTUFF) ..)
	- rmdir stage3
	$(MAKE) subdir_do DO=de-stage3 "DODIRS=$(SUBDIRS)"

tags etags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.h $(srcdir)/*.c

clean:
	rm -f *.[oa] *~ core *.E *.p *.ip aout-params.h gen-aout
	$(MAKE) subdir_do DO=clean "DODIRS=$(SUBDIRS)"

clobber realclean: clean
	rm -f libbfd.a TAGS
	$(MAKE) subdir_do DO=clobber "DODIRS=$(SUBDIRS)"

# Mark everything as depending on config.status, since the timestamp on
# sysdep.h might actually move backwards if we reconfig and relink it
# to a different hosts/h-xxx.h file.  This will force a recompile anyway.
# dos - don't do that.
RECONFIG = 
$(BFD_LIBS):  libbfd.h $(BFD_H) $(RECONFIG)
$(BFD_MACHINES):  libbfd.h $(BFD_H) $(RECONFIG)
$(BFD_BACKENDS):  libbfd.h $(BFD_H) $(RECONFIG)
$(OPTIONAL_BACKENDS):  libbfd.h $(BFD_H) $(RECONFIG)

# Get around a Sun Make bug in SunOS 4.1.1 with VPATH
cpu-i386.o: cpu-i386.c

saber:
	#suppress 65 on bfd_map_over_sections 
	#suppress 66 on bfd_map_over_sections 
	#suppress 67 on bfd_map_over_sections 
	#suppress 68 on bfd_map_over_sections 
	#suppress 69 on bfd_map_over_sections 
	#suppress 70 on bfd_map_over_sections 
	#suppress 110 in bfd_map_over_sections 
	#suppress 112 in bfd_map_over_sections 
	#suppress 530 
	#suppress 590 in swap_exec_header 
	#suppress 590 in _bfd_dummy_core_file_matches_executable_p 
	#suppress 590 in bfd_dont_truncate_arname
	#suppress 590 on ignore 
	#suppress 590 on abfd 
	#setopt load_flags $(CFLAGS)
	#load $(CFILES)


#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# This target should be invoked before building a new release.
# 'VERSION' file must be present and contain a string of the form "x.y"
#
roll:
	@V=`cat VERSION`		; \
	MAJ=`sed 's/\..*//' VERSION`	; \
	MIN=`sed 's/.*\.//' VERSION`	; \
	V=$$MAJ.`expr $$MIN + 1`	; \
	rm -f VERSION			; \
	echo $$V >VERSION		; \
	echo Version $$V

# Dummy target to force execution of dependent targets.
#
force:

install:
	$(INSTALL_DATA) libbfd.a $(libdir)/libbfd.a
	$(RANLIB) $(libdir)/libbfd.a
	$(INSTALL_DATA) $(INCDIR)/bfd.h $(includedir)/bfd.h
	$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS)"

# Target to uncomment host-specific lines in this makefile.  Such lines must
# have the following string beginning in column 1: #__<hostname>__#
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#
make:
	-@if test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	fi ; \
	grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	fi ; \
	mv -f Makefile Makefile.old; \
	echo "#The next line was generated by 'make make'"	 >Makefile ; \
	echo "HOST=$(HOST)"					>>Makefile ; \
	echo							>>Makefile ; \
	sed "s/^#__$(HOST)__#//" < Makefile.old			>>Makefile

Makefile: $(srcdir)/Makefile.in $(host_makefile_frag) $(target_makefile_frag)
	$(SHELL) ./config.status

dep: $(CFILES)
	mkdep $(CFLAGS) $?

gen-aout:  $(srcdir)/gen-aout.c
	$(CC) -o gen-aout $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c

aout-params.h: gen-aout
	./gen-aout > aout-params.h

host-aout.o:  aout-params.h

headers:
	(cd $(docdir); $(MAKE) protos)
	# Rebuild prototypes in bfd.h
	cp $(docdir)/bfd.h $(BFD_H)
	cp $(docdir)/libbfd.h $(srcdir)/libbfd.h
	cp $(docdir)/libcoff.h $(srcdir)/libcoff.h

bfd.info:
	( cd $(docdir); $(MAKE) bfd.info)

bfd.dvi:
	(cd $(docdir); $(MAKE) bfd.dvi)

bfd.ps: 
	(cd $(docdir); $(MAKE) bfd.ps)

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.

libbfd.o : libbfd.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
opncls.o : opncls.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
bfd.o : bfd.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
archive.o : archive.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h 
targets.o : targets.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
cache.o : cache.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
archures.o : archures.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h 
aout64.o : aout64.c 
aout32.o : aout32.c aoutx.h $(INCDIR)/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/obstack.h libaout.h libbfd.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h 
sunos.o : sunos.c aoutf1.h $(INCDIR)/bfd.h $(INCDIR)/obstack.h \
  libaout.h libbfd.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h 
demo64.o : demo64.c 

srec.o : srec.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h 
oasys.o : oasys.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/oasys.h liboasys.h 
ieee.o : ieee.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/ieee.h libieee.h 
coff-h83.o: coff-h83.c  $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h coffcode.h 
format.o : format.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
section.o : section.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
core.o : core.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 
syms.o : syms.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 

reloc.o : reloc.c $(INCDIR)/bfd.h \
  $(INCDIR)/obstack.h libbfd.h 

trad-core.o : trad-core.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h \
  libbfd.h libaout.h 
newsos3.o : newsos3.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
i386aout.o : i386aout.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h libaout.h 
bout.o : bout.c $(INCDIR)/bfd.h $(INCDIR)/obstack.h libbfd.h \
  $(INCDIR)/bout.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h 

# IF YOU PUT ANYTHING HERE IT WILL GO AWAY

