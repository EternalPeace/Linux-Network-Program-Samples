Things that still need to be done: -*- Text -*-

 o - BFD-based applications are very bloated.
     The MINIMIZE flag is a step in the right direction,
     but it doesn't make the bfd library smaller or build faster (it
     just makes statically built BFD applications smaller).
     We need to allow specifiction of one or more targets at configure
     time - and only code needed by those targets would get built
     and included in libbfd.a.

 o - Another source of space lossage is that all the target-dependent
     code is in a single bfd_target structure.  Hence all the code
     for *writing* object files is still pulled into all the applications
     that only care about *reading* (gdb, nm, objdump), while gas
     has to carry along all the unneded baggage for reading objects.
     And so one.  This would be a much more substantial change,
     and the payoff would be less (essentially none if bfd is
     used as a shared library).

 o - The storage needed by BFD data structures is also larger than strictly
     needed.  This may be difficult to do much about.fix.

 o - implement bfd_abort, which should close the bfd but not alter the
     filesystem.

 o - update the bfd doc; write a how-to-write-a-backend doc, take out
     the stupid quips and fill in all the blanks.

 o - upgrade the reloc handling as per Steve's suggestion.




