AbbrevExpand	abbrev.c	/^AbbrevExpand()$/
AddError	proc.c	/^AddError(laste, errline, buf, line, charpos)$/
AddLines	disp.c	/^AddLines(at, num)$/
AddSpecial	insert.c	/^AddSpecial()$/
AdjustScrollBar	mac.c	/^AdjustScrollBar(w)	\/* redo existing control *\/$/
AllMarkSet	marks.c	/^AllMarkSet(b, line, col)$/
AppReg	io.c	/^AppReg()$/
Apropos	keymaps.c	/^Apropos()$/
BGd_lines	screen.c	/^BGd_lines(top, bottom, num)$/
BGi_lines	screen.c	/^BGi_lines(top, bottom, num)$/
BList	c.c	/^BList()$/
BSexpr	c.c	/^BSexpr()$/
BUpList	c.c	/^BUpList()$/
B_HASH	io.c	/^#define B_HASH(bno)	((bno) % HASHSIZE)$/
BackChar	move.c	/^BackChar()$/
BackMotion	screen.c	/^BackMotion(destcol)$/
BackPara	paragraph.c	/^BackPara()$/
BackWord	move.c	/^BackWord()$/
BindAKey	keymaps.c	/^BindAKey()$/
BindMac	keymaps.c	/^BindMac()$/
BindMtoW	abbrev.c	/^BindMtoW()$/
BindSomething	keymaps.c	/^BindSomething(proc, map)$/
BindWMap	keymaps.c	/^BindWMap(map, lastkey, cmd)$/
Bof	move.c	/^Bof()$/
Bol	move.c	/^Bol()$/
Bos	move.c	/^Bos()$/
BottomUp	screen.c	/^BottomUp(line, col)$/
Bow	disp.c	/^Bow()$/
Buf0Select	buf.c	/^void Buf0Select() { BufNSelect(0); }$/
Buf1Select	buf.c	/^void Buf1Select() { BufNSelect(1); }$/
Buf2Select	buf.c	/^void Buf2Select() { BufNSelect(2); }$/
Buf3Select	buf.c	/^void Buf3Select() { BufNSelect(3); }$/
Buf4Select	buf.c	/^void Buf4Select() { BufNSelect(4); }$/
Buf5Select	buf.c	/^void Buf5Select() { BufNSelect(5); }$/
Buf6Select	buf.c	/^void Buf6Select() { BufNSelect(6); }$/
Buf7Select	buf.c	/^void Buf7Select() { BufNSelect(7); }$/
Buf8Select	buf.c	/^void Buf8Select() { BufNSelect(8); }$/
Buf9Select	buf.c	/^void Buf9Select() { BufNSelect(9); }$/
BufErase	buf.c	/^BufErase()$/
BufKill	buf.c	/^BufKill()$/
BufList	buf.c	/^BufList()$/
BufMPrint	mac.c	/^BufMPrint(b,i)$/
BufMinorMode	buf.h	/^#define BufMinorMode(b, x)	(((b)->b_minor & (x)) !/
BufNSelect	buf.c	/^BufNSelect(n)$/
BufPos	extend.c	/^BufPos()$/
BufSelect	buf.c	/^BufSelect()$/
BufSwrite	screen.c	/^BufSwrite(linenum)$/
C100d_lines	screen.c	/^C100d_lines(top, bottom, num)$/
C100i_lines	screen.c	/^C100i_lines(top, bottom, num)$/
CAutoExec	extend.c	/^CAutoExec()$/
CTL	chars.h	/^#define CTL(c)		((c) & 037)$/
CalcWind	wind.c	/^CalcWind(w)$/
CapChar	case.c	/^CapChar()$/
CapWord	case.c	/^CapWord()$/
CasRegLower	case.c	/^CasRegLower()$/
CasRegUpper	case.c	/^CasRegUpper()$/
CaseReg	case.c	/^CaseReg(up)$/
CentWind	wind.c	/^CentWind(w)$/
CharUpcase	ctype.h	/^#define	CharUpcase(c)	(RaiseTable[c])$/
Chdir	io.c	/^Chdir()$/
CheckEvents	mac.c	/^CheckEvents()$/
ChkErrorLines	proc.c	/^ChkErrorLines()$/
ChkWinLines	disp.c	/^ChkWinLines()$/
ChkWindows	disp.c	/^ChkWindows(line1, line2)$/
ChrToOct	misc.c	/^ChrToOct()$/
ClAndRedraw	disp.c	/^ClAndRedraw()$/
Comment	c.c	/^Comment()$/
CopyRegion	delete.c	/^CopyRegion()$/
CurMark	marks.c	/^CurMark()$/
DBXpoutput	iproc.c	/^DBXpoutput()$/
DFixMarks	marks.c	/^DFixMarks(line1, char1, line2, char2)$/
DIRSIZE	scandir.c	/^#define DIRSIZE(entry)	(strlen((entry)->d_name))$/
DOTsave	util.c	/^DOTsave(buf)$/
DScroll	mac.c	/^DScroll(control,part)$/
Dchdir	io.c	/^#define	Dchdir(to)  chdir(to)$/
DeTab	disp.c	/^DeTab(s_offset, buf, outbuf, limit, visspace)$/
DefAutoExec	extend.c	/^DefAutoExec(proc)$/
DefGAbbrev	abbrev.c	/^DefGAbbrev()$/
DefKBDMac	macros.c	/^DefKBDMac()$/
DefMAbbrev	abbrev.c	/^DefMAbbrev()$/
DefMajor	dataobj.h	/^#define DefMajor(x)	(FUNCTION|MAJOR_MODE|((x) << 8/
DefMinor	dataobj.h	/^#define DefMinor(x)	(FUNCTION|MINOR_MODE|((x) << 8/
DelBlnkLines	delete.c	/^DelBlnkLines()$/
DelChar	disp.c	/^DelChar(lineno, col, num)$/
DelCurWindow	wind.c	/^DelCurWindow()$/
DelLines	disp.c	/^DelLines(at, num)$/
DelMacro	macros.c	/^DelMacro()$/
DelMark	marks.c	/^DelMark(m)$/
DelNChar	delete.c	/^DelNChar()$/
DelNWord	delete.c	/^DelNWord()$/
DelPChar	delete.c	/^DelPChar()$/
DelPWord	delete.c	/^DelPWord()$/
DelReg	delete.c	/^DelReg()$/
DelWtSpace	delete.c	/^DelWtSpace()$/
DescBindings	keymaps.c	/^DescBindings()$/
DescCom	keymaps.c	/^DescCom()$/
DescMap	keymaps.c	/^DescMap(map, pref)$/
DescWMap	keymaps.c	/^DescWMap(map, key)$/
Digit	argcount.c	/^Digit()$/
Digit0	argcount.c	/^Digit0()$/
Digit1	argcount.c	/^Digit1()$/
Digit2	argcount.c	/^Digit2()$/
Digit3	argcount.c	/^Digit3()$/
Digit4	argcount.c	/^Digit4()$/
Digit5	argcount.c	/^Digit5()$/
Digit6	argcount.c	/^Digit6()$/
Digit7	argcount.c	/^Digit7()$/
Digit8	argcount.c	/^Digit8()$/
Digit9	argcount.c	/^Digit9()$/
DoAutoExec	extend.c	/^DoAutoExec(new, old)$/
DoIDline	disp.c	/^DoIDline(start)$/
DoJustify	paragraph.c	/^DoJustify(l1, c1, l2, c2, scrunch, indent)$/
DoKeys	jove.c	/^DoKeys(firsttime)$/
DoNewline	insert.c	/^DoNewline(indentp)$/
DoPara	paragraph.c	/^DoPara(dir)$/
DoParen	insert.c	/^DoParen()$/
DoShell	proc.c	/^DoShell(bnm, command)$/
DoWriteReg	io.c	/^DoWriteReg(app)$/
DoYank	insert.c	/^DoYank(fline, fchar, tline, tchar, atline, atchar,/
DotTo	util.c	/^DotTo(line, col)$/
DownMotion	screen.c	/^DownMotion(destline)$/
DownScroll	disp.c	/^DownScroll()$/
DrawMesg	disp.c	/^DrawMesg(abortable)$/
EVexpand	ask.c	/^EVexpand()$/
EditAbbrevs	abbrev.c	/^EditAbbrevs()$/
Eof	move.c	/^Eof()$/
Eol	move.c	/^Eol()$/
Eos	move.c	/^Eos()$/
Eow	disp.c	/^Eow()$/
ErrFree	proc.c	/^ErrFree()$/
ErrParse	proc.c	/^ErrParse()$/
ErrorHasReferents	proc.c	/^ErrorHasReferents()$/
ExecCmd	util.c	/^ExecCmd(cp)$/
ExecMacro	macros.c	/^ExecMacro()$/
Extend	extend.c	/^Extend()$/
FDotTag	re1.c	/^FDotTag()$/
FDownList	c.c	/^FDownList()$/
FLine	wind.c	/^FLine(w)$/
FList	c.c	/^FList()$/
FSexpr	c.c	/^FSexpr()$/
FSrchND	re.c	/^FSrchND()$/
F_MODE	fp.h	/^#define F_MODE(x)	((x)&07)$/
Ffilter	mac.c	/^Ffilter(p)$/
FillComment	c.c	/^FillComment(format)$/
FilterRegion	proc.c	/^FilterRegion()$/
FindCmd	util.c	/^FindCmd(proc)$/
FindFile	buf.c	/^FindFile()$/
FindMatch	c.c	/^FindMatch(dir)$/
FindTag	re1.c	/^FindTag()$/
ForChar	move.c	/^ForChar()$/
ForMotion	screen.c	/^ForMotion(destcol)$/
ForNum	screen.c	/^ForNum(from, to)$/
ForPara	paragraph.c	/^ForPara()$/
ForSearch	re.c	/^ForSearch()$/
ForTab	screen.c	/^ForTab(destcol)$/
ForWord	move.c	/^ForWord()$/
Forget	macros.c	/^Forget()$/
FullRecover	rec.c	/^FullRecover()$/
GCchunks	insert.c	/^GCchunks()$/
GENd_lines	screen.c	/^GENd_lines(top, bottom, num)$/
GENi_lines	screen.c	/^GENi_lines(top, bottom, num)$/
GSexpr	insert.c	/^GSexpr()$/
GoDirect	screen.c	/^GoDirect(line, col)$/
GoLine	misc.c	/^GoLine()$/
GotoDot	disp.c	/^GotoDot()$/
GotoWind	wind.c	/^GotoWind()$/
GrowWindowCmd	wind.c	/^GrowWindowCmd()$/
HALF	wind.h	/^#define HALF(wp)	(((wp)->w_height - 1) \/ 2)$/
HLmode	mac.c	/^HLmode(new)$/
HomeGo	screen.c	/^HomeGo(line, col)$/
IDchar	disp.c	/^IDchar(new, lineno, col)$/
IDcomp	disp.c	/^IDcomp(s, t, len)$/
IDline_setup	screen.c	/^IDline_setup(tname)$/
IFixMarks	marks.c	/^IFixMarks(line1, char1, line2, char2)$/
INSmode	disp.c	/^INSmode(on)$/
IOerr	util.c	/^IOerr(err, file)$/
IncFSearch	re1.c	/^IncFSearch()$/
IncRSearch	re1.c	/^IncRSearch()$/
IncSearch	re1.c	/^IncSearch(dir)$/
InitBinds	mac.c	/^InitBinds()$/
InitCM	screen.c	/^InitCM()$/
InitEvents	mac.c	/^InitEvents()$/
InitKeymaps	keymaps.c	/^InitKeymaps()$/
InitLocalMenus	mac.c	/^InitLocalMenus()$/
InitMenu	mac.c	/^InitMenu(M)$/
InitSysMenu	mac.c	/^InitSysMenu()$/
InsChar	disp.c	/^InsChar(lineno, col, num, new)$/
InsFile	io.c	/^InsFile()$/
Insert	insert.c	/^Insert(c)$/
Iprocess	iproc.c	/^Iprocess()$/
IsModified	util.h	/^#define IsModified(b)	((b)->b_modified)$/
IsPrefix	keymaps.c	/^IsPrefix(cp)$/
Justify	paragraph.c	/^Justify()$/
KeyDesc	keymaps.c	/^KeyDesc()$/
KillBos	misc.c	/^KillBos()$/
KillEOL	misc.c	/^KillEOL()$/
KillEos	misc.c	/^KillEos()$/
KillExpr	misc.c	/^KillExpr()$/
KillProcs	iproc.c	/^KillProcs()$/
KillSome	buf.c	/^KillSome()$/
KmBind	keymaps.c	/^KmBind()$/
LRShift	c.c	/^LRShift()$/
LRUunlink	io.c	/^LRUunlink(b)$/
Leave	misc.c	/^Leave()$/
LineAI	insert.c	/^LineAI()$/
LineDist	util.c	/^LineDist(nextp, endp)$/
LineInsert	insert.c	/^LineInsert(num)$/
LookingAt	re.c	/^LookingAt(pattern, buf, offset)$/
LowLine	screen.c	/^#define LowLine()	{ putpad(LL, 1); CapLine = ILI; /
LowWord	case.c	/^LowWord()$/
MAutoExec	extend.c	/^MAutoExec()$/
META	chars.h	/^#define META(c)		((c) | 0200)$/
MacInit	mac.c	/^MacInit()$/
MacInter	macros.c	/^MacInter()$/
MacSetVar	mac.c	/^MacSetVar(vp,mnu,itm)	\/* Set a variable from the m/
MajorMode	buf.h	/^#define MajorMode(x)	(curbuf->b_major == (x))$/
MakeErrors	proc.c	/^MakeErrors()$/
MakeKMap	keymaps.c	/^MakeKMap()$/
MakeMark	marks.c	/^MakeMark(line, column, type)$/
MakeName	proc.c	/^MakeName(command)$/
MakeScrollBar	mac.c	/^MakeScrollBar(w)	\/* set up control *\/$/
MarkAllVar	mac.c	/^MarkAllVar()	\/* slow, but only do it once *\/$/
MarkModes	mac.c	/^MarkModes()$/
MarkSet	marks.c	/^MarkSet(m, line, column)$/
MarkVar	mac.c	/^MarkVar(vp,mnu,itm)	\/* mark a boolean menu item *\//
MaybeAbbrevExpand	insert.c	/^MaybeAbbrevExpand()$/
MinorMode	buf.h	/^#define MinorMode(x)		BufMinorMode(curbuf, (x))$/
Mjove	jove.c	/^main()$/
ModBufs	util.c	/^ModBufs(allp)$/
ModMacs	macros.c	/^ModMacs()$/
ModeLine	disp.c	/^ModeLine(w)$/
NPage	mac.c	/^NPage(control,part)$/
NPlacur	mac.c	/^NPlacur(line,col)$/
NameMac	macros.c	/^NameMac()$/
NeedErrors	proc.c	/^NeedErrors()$/
Newline	insert.c	/^Newline()$/
NextError	proc.c	/^NextError()$/
NextLine	move.c	/^NextLine()$/
NextPage	disp.c	/^NextPage()$/
NextWindow	wind.c	/^NextWindow()$/
NotModified	misc.c	/^NotModified()$/
NumSimilar	disp.c	/^NumSimilar(s, t, n)$/
OkayDelete	disp.c	/^OkayDelete(Saved, num, samelength)$/
OkayInsert	disp.c	/^OkayInsert(Saved, num)$/
OneWindow	wind.c	/^OneWindow()$/
OpenLine	insert.c	/^OpenLine()$/
PPage	mac.c	/^PPage(control,part)$/
PPchar	fmt.c	/^PPchar(c, str, size)$/
PageNWind	wind.c	/^PageNWind()$/
PageScrollDown	disp.c	/^PageScrollDown()$/
PageScrollUp	disp.c	/^PageScrollUp()$/
PathParse	io.c	/^PathParse(name, intobuf)$/
PauseJove	jove.c	/^PauseJove()$/
Peekc	jove.c	/^Peekc()$/
Placur	screen.c	/^Placur(line, col)$/
PopMark	marks.c	/^PopMark()$/
Popd	io.c	/^Popd()$/
PrVar	extend.c	/^PrVar()$/
PrefChar	keymaps.c	/^PrefChar(c)$/
PrevError	proc.c	/^PrevError()$/
PrevLine	move.c	/^PrevLine()$/
PrevPage	disp.c	/^PrevPage()$/
PrevWindow	wind.c	/^PrevWindow()$/
PrintHo	screen.c	/^#define PrintHo()	{ putpad(HO, 1); CapLine = CapCo/
ProcBind	keymaps.c	/^ProcBind()$/
ProcCont	iproc-ptys.c	/^ProcCont()$/
ProcDStop	iproc-ptys.c	/^ProcDStop()$/
ProcEof	iproc-ptys.c	/^ProcEof()$/
ProcFilter	mac.c	/^ProcFilter(theDialog,event,itemHit)$/
ProcInt	iproc-ptys.c	/^ProcInt()$/
ProcKill	iproc-ptys.c	/^ProcKill()$/
ProcKmBind	keymaps.c	/^ProcKmBind()$/
ProcList	iproc.c	/^ProcList()$/
ProcMenu	mac.c	/^ProcMenu(menuno,itemno)$/
ProcNewline	iproc.c	/^ProcNewline()$/
ProcQuit	iproc-ptys.c	/^ProcQuit()$/
ProcSendData	iproc.c	/^ProcSendData()$/
ProcStop	iproc-ptys.c	/^ProcStop()$/
PtToMark	marks.c	/^PtToMark()$/
Push	jove.c	/^Push()$/
PushPntp	util.c	/^PushPntp(line)$/
Pushd	io.c	/^Pushd()$/
QRepSearch	re1.c	/^QRepSearch()$/
QuotChar	insert.c	/^QuotChar()$/
REcompile	re.c	/^REcompile(pattern, re, re_blk)$/
REgetc	re.c	/^REgetc()$/
REmatch	re.c	/^REmatch(linep, comp_ptr)$/
RErecur	re.c	/^RErecur()$/
REreset	re.c	/^REreset()$/
RRShift	c.c	/^RRShift()$/
RSrchND	re.c	/^RSrchND()$/
ReNamBuf	buf.c	/^ReNamBuf()$/
ReadFile	io.c	/^ReadFile()$/
Recur	jove.c	/^Recur()$/
RecycleLines	insert.c	/^RecycleLines()$/
RedrawDisplay	disp.c	/^RedrawDisplay()$/
RegJustify	paragraph.c	/^RegJustify()$/
RegReplace	re1.c	/^RegReplace()$/
RegToUnix	proc.c	/^RegToUnix(outbuf, cmd)$/
Remember	macros.c	/^Remember()$/
RemoveScrollBar	mac.c	/^RemoveScrollBar(w)$/
RepSearch	re1.c	/^RepSearch()$/
ResetTerm	jove.c	/^ResetTerm()$/
Reset_std	mac.c	/^Reset_std()$/
RestAbbrevs	abbrev.c	/^RestAbbrevs()$/
RetTab	screen.c	/^RetTab(col)$/
RevSearch	re.c	/^RevSearch()$/
RunMacro	macros.c	/^RunMacro()$/
SETBIT	re.c	/^#define	SETBIT(c)	(1 << ((c) % BYTESIZE))$/
SETBYTE	re.c	/^#define	SETBYTE(c)	((c) \/ BYTESIZE)$/
SIZE	wind.h	/^#define SIZE(wp)	((wp)->w_height - 1)$/
SO_off	screen.c	/^SO_off()$/
SO_on	screen.c	/^SO_on()$/
SUNd_lines	screen.c	/^SUNd_lines(top, bottom, num)$/
SUNi_lines	screen.c	/^SUNi_lines(top, bottom, num)$/
SavLine	util.h	/^#define SavLine(a, b)	((a)->l_dline = putline((b))/
SaveAbbrevs	abbrev.c	/^SaveAbbrevs()$/
SaveFile	io.c	/^SaveFile()$/
ScrollLeft	wind.c	/^ScrollLeft()$/
ScrollRight	wind.c	/^ScrollRight()$/
SelfInsert	insert.c	/^SelfInsert()$/
SendData	iproc.c	/^SendData(newlinep)$/
SetABuf	buf.c	/^SetABuf(b)$/
SetBounds	mac.c	/^SetBounds()$/
SetBuf	buf.c	/^SetBuf(newbuf)$/
SetBufMenu	mac.c	/^SetBufMenu()$/
SetDot	util.c	/^SetDot(bp)$/
SetLMargin	misc.c	/^SetLMargin()$/
SetLine	util.h	/^#define SetLine(line)	DotTo((line), 0)$/
SetMajor	buf.h	/^#define SetMajor(x)	{ curbuf->b_major = (x); UpdMo/
SetMark	marks.c	/^SetMark()$/
SetRMargin	misc.c	/^SetRMargin()$/
SetScrollBar	mac.c	/^SetScrollBar(handle)	\/* set value of the bar *\/$/
SetTop	wind.c	/^SetTop(w, line)$/
SetVar	extend.c	/^SetVar()$/
SetWind	wind.c	/^SetWind(new)$/
Set_std	mac.c	/^Set_std()$/
ShNoBuf	proc.c	/^ShNoBuf()$/
ShToBuf	proc.c	/^ShToBuf()$/
ShellCom	proc.c	/^ShellCom()$/
ShellProc	iproc.c	/^ShellProc()$/
ShowErr	proc.c	/^ShowErr()$/
ShowVersion	jove.c	/^ShowVersion()$/
ShrWindow	wind.c	/^ShrWindow()$/
Shtypeout	proc.c	/^Shtypeout()$/
SigHold	sysdep.h	/^# define SigHold(s)	sigblock(SigMask |= sigmask((s/
SigRelse	sysdep.h	/^# define SigRelse(s)	sigsetmask(SigMask &= ~sigmas/
SitFor	util.c	/^SitFor(delay)$/
Source	extend.c	/^Source()$/
SpelBuffer	proc.c	/^SpelBuffer()$/
SpelParse	proc.c	/^SpelParse(bname)$/
SpelWords	proc.c	/^SpelWords()$/
SplitWind	wind.c	/^SplitWind()$/
StrIndex	util.c	/^StrIndex(dir, buf, charpos, what)$/
StrLength	misc.c	/^StrLength()$/
SyncRec	rec.c	/^SyncRec()$/
SyncTmp	io.c	/^SyncTmp()$/
TOstart	disp.c	/^TOstart(name, auto_newline)$/
TOstop	disp.c	/^TOstop()$/
Tab	insert.c	/^Tab()$/
TermError	term.c	/^TermError()$/
TimesFour	argcount.c	/^TimesFour()$/
ToError	proc.c	/^ToError(forward)$/
ToFirst	util.c	/^ToFirst()$/
ToIndent	misc.c	/^ToIndent()$/
ToLast	util.c	/^ToLast()$/
ToMark	marks.c	/^ToMark(m)$/
TogMinor	buf.c	/^TogMinor(bit)$/
TransChar	misc.c	/^TransChar()$/
TransLines	misc.c	/^TransLines()$/
TwoBlank	util.c	/^TwoBlank()$/
Typeout	disp.c	/^Typeout(char *fmt, ...)$/
UNIX_cmdline	jove.c	/^UNIX_cmdline(argc, argv)$/
UNMACRO	externs.h	/^extern int	UNMACRO(vfork) proto((void));$/
UScroll	mac.c	/^UScroll(control,part)$/
UnbindC	keymaps.c	/^UnbindC()$/
Ungetc	jove.c	/^Ungetc(c)$/
UnixToBuf	proc.c	/^UnixToBuf(char *bnm, char *InFName, bool disp, int/
UnsetTerm	jove.c	/^UnsetTerm(mesg)$/
UntilEqual	disp.c	/^UntilEqual(start)$/
UpMotion	screen.c	/^UpMotion(destline)$/
UpScroll	disp.c	/^UpScroll()$/
UpdLine	disp.c	/^UpdLine(linenum)$/
UpdWindow	disp.c	/^UpdWindow(w, start)$/
UppWord	case.c	/^UppWord()$/
WIFEXITED	wait.h	/^# define WIFEXITED(w)		(((w).w_status & 0377) == 0/
WIFSIGNALED	wait.h	/^# define WIFSIGNALED(w)		((((w).w_status >> 8) & 0/
WIFSTOPPED	wait.h	/^# define WIFSTOPPED(w)		(((w).w_status & 0377) == /
WIRED_CMD	funcdefs.c	/^#	define WIRED_CMD(c) (c),'\\0','\\0'	\/* for About J/
WITH_TABLE	ctype.h	/^#define	WITH_TABLE(x) \\$/
WNumLines	wind.c	/^WNumLines()$/
WVisSpace	wind.c	/^WVisSpace()$/
WindFind	wind.c	/^WindFind()$/
WindSize	wind.c	/^WindSize(w, inc)$/
WriteFile	io.c	/^WriteFile()$/
WriteMacs	macros.c	/^WriteMacs()$/
WrtReg	io.c	/^WrtReg()$/
WtModBuf	misc.c	/^WtModBuf()$/
XtermMouse	misc.c	/^XtermMouse()$/
Yank	misc.c	/^Yank()$/
YankPop	insert.c	/^YankPop()$/
about_j	mac.c	/^about_j()$/
abs	screen.c	/^#define abs(x)	((x) >= 0 ? (x) : -(x))$/
abspath	io.c	/^abspath(so, dest)$/
active	mac.c	/^#define active() SetPort(theScreen)$/
add_mac	macros.c	/^add_mac(new)$/
add_mess	fmt.c	/^add_mess(const char *fmt, ...)$/
add_stroke	util.h	/^#define add_stroke(c)	{ \\$/
addgetc	extend.c	/^addgetc()$/
alloc_mthread	macros.c	/^alloc_mthread()$/
alphacomp	scandir.c	/^alphacomp(a, b)$/
arg_type	argcount.h	/^#define arg_type()		arg_supplied_p$/
arg_value	argcount.h	/^#define arg_value()		arg_count$/
ask	ask.c	/^ask(char *def, char *fmt,...)$/
ask_buf	buf.c	/^ask_buf(def)$/
ask_file	ask.c	/^ask_file(prmt, def, buf)$/
ask_int	extend.c	/^ask_int(prompt, base)$/
aux_complete	extend.c	/^aux_complete(c)$/
b_char	move.c	/^b_char(n)$/
b_unlink	io.c	/^b_unlink(bp)$/
b_word	move.c	/^b_word(num)$/
back_space	pcscr.c	/^#define back_space()	cur_left()$/
backref	re.c	/^backref(n, linep)$/
backslashed	c.c	/^backslashed(lp, cpos)$/
bad_extension	ask.c	/^bad_extension(name)$/
basename	util.c	/^basename(f)$/
biff	jove.c	/^biff(on)$/
biff_init	jove.c	/^biff_init()$/
blk_round	temp.h	/^#define blk_round(addr)		((daddr) (addr) & ~RND_MA/
blnkp	util.c	/^blnkp(buf)$/
bobp	util.h	/^#define bobp()		(firstp(curline) && bolp())$/
bolp	util.h	/^#define bolp()		(curchar == 0)$/
break_off	jove.c	/^break_off()$/
break_rst	jove.c	/^break_rst()$/
buf_alloc	buf.c	/^buf_alloc()$/
buf_exists	buf.c	/^buf_exists(name)$/
buf_init	buf.c	/^buf_init()$/
bufname	buf.c	/^bufname(b)$/
byte_copy	util.c	/^byte_copy(from, to, count)$/
byte_zero	sysdep.h	/^# define byte_zero(s,n) setmem((s),(n),0)$/
c_indent	c.c	/^c_indent(brace)$/
calc_pos	disp.c	/^calc_pos(lp, c_char)$/
carriage_return	pcscr.c	/^#define carriage_return()	gotoxy(wherex(), C_Y = 0/
case_reg	case.c	/^case_reg(line1, char1, line2, char2, up)$/
case_word	case.c	/^case_word(up)$/
casecmp	util.c	/^casecmp(s1, s2)$/
casencmp	util.c	/^casencmp(s1, s2, n)$/
ch_out	pcscr.c	/^void near ch_out(c, n)$/
charp	jove.c	/^charp()$/
chdir	mac.c	/^chdir(dir)$/
check_dir	mac.c	/^check_dir()$/
chkCWD	io.c	/^chkCWD(dn)$/
chk_mtime	io.c	/^chk_mtime(thisbuf, fname, how)$/
chkmail	disp.c	/^chkmail(force)$/
chpl	pcscr.c	/^BYTE chpl()$/
chr_to_int	extend.c	/^chr_to_int(cp, base, allints, result)$/
cind_cmp	re.c	/^#define cind_cmp(a, b)	(CharUpcase(a) == CharUpcas/
cl_eol	screen.c	/^cl_eol()$/
cl_scr	screen.c	/^cl_scr(doit)$/
close	mac.c	/^close(fd)$/
close_file	io.c	/^close_file(fp)$/
closedir	scandir.c	/^closedir(dp)$/
closekmem	loadavg.c	/^closekmem()$/
clr_arg_value	argcount.h	/^#define clr_arg_value()		{ arg_supplied_p = NO; ar/
clr_eoln	mac.c	/^clr_eoln()$/
clr_eop	pcscr.c	/^void near clr_eop()$/
clr_page	mac.c	/^clr_page()	\/* clear and home function *\/$/
clrline	screen.c	/^clrline(cp1, cp2)$/
cmp_char	re1.c	/^#define cmp_char(a, b)	((a) == (b) || (CaseIgnore /
com_finish	proc.c	/^com_finish(status, cmd)$/
complain	jove.c	/^complain(const char *fmt, ...)$/
complete	extend.c	/^complete(possible, prompt, flags)$/
con_read	mac.c	/^con_read(buf,size)$/
con_write	mac.c	/^con_write(buf,size)$/
confirm	jove.c	/^confirm(const char *fmt, ...)$/
conv_p_curs	mac.c	/^conv_p_curs(row,col)$/
copystr	util.c	/^copystr(str)$/
creat	mac.c	/^creat(name,perm)	\/* permission mode is irrelevant /
ctol	mac.c	/^ctol(ctlv)	\/* find buffer line for ctlvalue *\/$/
cur_advance	pcscr.c	/^void near cur_advance()$/
cur_down	pcscr.c	/^void near cur_down()$/
cur_left	pcscr.c	/^void near cur_left()$/
cur_mov	pcscr.c	/^#define cur_mov(x,y)	set_cur((C_X=(x))<<8|((C_Y=(y/
cur_page	pcscr.c	/^WORD near cur_page()$/
cur_right	pcscr.c	/^void near cur_right()$/
cur_up	pcscr.c	/^void near cur_up()$/
curset	mac.c	/^curset(desired)$/
cvt_err	mac.c	/^cvt_err(err)	\/* some of these don't make sense... /
cvt_fnm	mac.c	/^cvt_fnm(file)$/
d_cache_init	io.c	/^d_cache_init()$/
d_lines	mac.c	/^d_lines(top, bottom, num)$/
da_to_bno	temp.h	/^#define da_to_bno(addr)		((daddr) ((addr) >> BNO_S/
da_to_off	temp.h	/^#define da_to_off(addr)		((daddr) ((addr) << CH_BI/
da_too_huge	temp.h	/^#define da_too_huge(addr)	((daddr) ((addr) >> BNO_/
def_abbrev	abbrev.c	/^def_abbrev(table)$/
defb_wind	buf.c	/^defb_wind(b)$/
define	abbrev.c	/^define(table, abbrev, phrase)$/
defined	sysdep.h	/^# define defined(x) (x)$/
del_char	delete.c	/^del_char(dir, num, OK_kill)$/
del_mac	macros.c	/^del_mac(mac)$/
del_wind	wind.c	/^del_wind(wp)$/
delchars	mac.c	/^delchars()$/
dellines	mac.c	/^dellines(n,bot)$/
dfollow	io.c	/^dfollow(file, into)$/
dir_name	io.c	/^#define dir_name(dp)	((char *) list_data((dp)))$/
disp_opt_init	disp.c	/^disp_opt_init()$/
dispatch	keymaps.c	/^dispatch(c)$/
div_wind	wind.c	/^div_wind(wp, n)$/
dmp_buf_header	rec.c	/^dmp_buf_header(b)$/
dmppntrs	rec.c	/^dmppntrs(b)$/
doActivate	mac.c	/^doActivate(event)$/
doDrag	mac.c	/^doDrag(event,window)$/
doGoAway	mac.c	/^doGoAway(event,window)$/
doGrow	mac.c	/^doGrow(event,window)$/
doMouse	mac.c	/^doMouse(event)$/
doSysClick	mac.c	/^doSysClick(event,window)$/
doSysMenu	mac.c	/^doSysMenu(event,window)$/
doUpdate	mac.c	/^doUpdate(event)$/
doWind	mac.c	/^doWind(event,window)$/
doZoomIn	mac.c	/^doZoomIn(event,window)$/
doZoomOut	mac.c	/^doZoomOut(event,window)$/
do_ask	ask.c	/^do_ask(char *delim, bool (*d_proc) proto((int)), c/
do_cl_eol	disp.c	/^do_cl_eol(linenum)$/
do_comp	re.c	/^do_comp(re_blk, kind)$/
do_creat	mac.c	/^do_creat(p,nm)$/
do_display	mac.c	/^do_display()		\/* draw necessary controls, lines *\//
do_events	mac.c	/^do_events()$/
do_expr	c.c	/^do_expr(dir, skip_words)$/
do_find	buf.c	/^do_find(w, fname, force)$/
do_if	extend.c	/^do_if(cmd)$/
do_list	mac.c	/^do_list()$/
do_macro	macros.c	/^do_macro(mac)$/
do_rfill	paragraph.c	/^do_rfill(ulm)$/
do_rtp	iproc.c	/^do_rtp(mp)$/
do_select	buf.c	/^do_select(w, name)$/
do_set_mark	marks.c	/^do_set_mark(l, c)$/
do_sgtty	jove.c	/^do_sgtty()$/
do_space	paragraph.c	/^do_space()$/
do_sputc	screen.c	/^do_sputc(c)$/
dobell	disp.c	/^dobell(n)$/
docompiled	re.c	/^docompiled(dir, re_blk)$/
docontrols	mac.c	/^docontrols()	\/* called from redisplay routines *\/$/
doformat	fmt.c	/^doformat(sp, fmt, ap)$/
dofread	io.c	/^dofread(fp)$/
doisearch	re1.c	/^doisearch(dir, c, failing)$/
dokeyDown	mac.c	/^dokeyDown(event)$/
dopipe	util.c	/^dopipe(p)$/
dorecover	jove.c	/^dorecover()$/
dosearch	re.c	/^dosearch(pattern, dir, re)$/
dowait	proc.c	/^dowait(pid, status)$/
drawfluff	mac.c	/^drawfluff()		\/* draw controls and dividers *\/$/
dummy	mac.c	/^int dummy() {}$/
dword	delete.c	/^dword(forward)$/
emalloc	util.c	/^emalloc(size)$/
eobp	util.h	/^#define eobp()		(lastp(curline) && eolp())$/
eolp	util.h	/^#define eolp()		(linebuf[curchar] == '\\0')$/
erealloc	util.c	/^erealloc(ptr, size)$/
error	jove.c	/^error(const char *fmt, ...)$/
f_char	move.c	/^f_char(n)$/
f_close	fp.c	/^f_close(fp)$/
f_complete	ask.c	/^f_complete(c)$/
f_eof	fp.h	/^#define f_eof(fp)	((fp)->f_flags & F_EOF)$/
f_getputl	io.c	/^f_getputl(line, fp)$/
f_gets	fp.c	/^f_gets(fp, buf, max)$/
f_match	ask.c	/^f_match(file)$/
f_mess	fmt.c	/^f_mess(const char *fmt, ...)$/
f_open	fp.c	/^f_open(name, flags, buffer, buf_size)$/
f_readn	fp.c	/^f_readn(fp, addr, n)$/
f_seek	fp.c	/^f_seek(fp, offset)$/
f_toNL	fp.c	/^f_toNL(fp)$/
f_word	move.c	/^f_word(num)$/
fake_blkio	io.c	/^fake_blkio(b, iofcn)$/
fb_aux	keymaps.c	/^fb_aux(cp, map, prefix, buf, size)$/
fd_open	fp.c	/^fd_open(name, flags, fd, buffer, buf_size)$/
filbuf	fp.c	/^filbuf(fp)$/
file_backup	io.c	/^file_backup(fname)$/
file_exists	buf.c	/^file_exists(name)$/
file_write	io.c	/^file_write(fname, app)$/
filemunge	io.c	/^filemunge(newname)$/
filename	util.c	/^filename(b)$/
fill_in	ask.c	/^fill_in(dir_vec, n)$/
find_binds	keymaps.c	/^find_binds(dp, buf, size)$/
find_para	paragraph.c	/^find_para(how)$/
find_pos	disp.c	/^find_pos(line, c_char)$/
find_tag	re1.c	/^find_tag(tag, localp)$/
findcom	funcdefs.c	/^findcom(prompt)$/
findmac	macros.c	/^findmac(prompt)$/
findmap	keymaps.c	/^findmap(fmt)$/
findtext	mac.c	/^findtext()		\/* locate and move the point to match /
findvar	vars.c	/^findvar(prompt)$/
finish	jove.c	/^finish(code)$/
firstp	util.h	/^#define firstp(line)	((line) == curbuf->b_first)$/
fixorder	util.c	/^fixorder(line1, char1, line2, char2)$/
fixpath	io.c	/^fixpath(p)$/
flush_marks	marks.c	/^flush_marks(b)$/
flushout	fp.c	/^flushout(fp)$/
flushscreen	fp.c	/^flushscreen()$/
format	fmt.c	/^format(buf, len, fmt, ap)$/
forward_block	temp.h	/^#define forward_block(addr)	((daddr) (addr) + CH_P/
fputnchar	fp.c	/^fputnchar(s, n, fp)$/
free_mthread	macros.c	/^free_mthread(t)$/
free_proc	iproc.c	/^free_proc(child)$/
freealloc	util.c	/^freealloc(obj, size)$/
freedir	scandir.c	/^freedir(nmptr, nentries)$/
freeline	insert.c	/^freeline(line)$/
fsetup	mac.c	/^fsetup(p)$/
fwritef	fmt.c	/^fwritef(File *fp, const char *fmt, ...)$/
gather_numeric_argument	argcount.c	/^gather_numeric_argument(c)$/
gc_openfiles	fp.c	/^gc_openfiles()$/
getArgs	mac.c	/^getArgs(avp)$/
getCO	mac.c	/^getCO()	\/* so that jove knows params *\/$/
getCWD	io.c	/^getCWD()$/
getDOT	util.h	/^#define getDOT()	getline(curline->l_dline, linebuf/
getLI	mac.c	/^getLI()$/
getNMbuf	buf.c	/^getNMbuf()$/
getTERM	term.c	/^getTERM()$/
get_FL_info	proc.c	/^get_FL_info(fname, lineno)$/
get_cur	pcscr.c	/^WORD near get_cur()$/
get_hdir	io.c	/^get_hdir(user, buf)$/
get_indent	paragraph.c	/^get_indent(lp)$/
get_keymaps	keymaps.c	/^get_keymaps(km_buf)$/
get_la	loadavg.c	/^get_la()$/
get_minibuf	ask.c	/^get_minibuf()$/
get_mode	pcscr.c	/^BYTE near get_mode()$/
get_time	util.c	/^get_time(timep, buf, from, to)$/
getblock	io.c	/^getblock(atl, IsWrite)$/
getch	jove.c	/^getch()$/
getdir	mac.c	/^getdir()	\/* call this only once, during startup. */
getenv	mac.c	/^getenv(item)$/
gethome	mac.c	/^gethome()		\/* this will be startup directory *\/$/
getline	io.c	/^getline(addr, buf)$/
getrawinchar	getch.c	/^getrawinchar()$/
getsearch	re.c	/^getsearch()$/
getwd	io.c	/^getwd(buffer)$/
gfile	mac.c	/^gfile(namebuf)	\/* return a filename to get *\/$/
gotoxy	pcscr.c	/^#define gotoxy(x,y)	set_cur((x)<<8|((y)&0xff))$/
has_syntax	ctype.h	/^#define	has_syntax(c,s)	(SyntaxTable[(c)&CHARMASK]/
hash	abbrev.c	/^hash(a)$/
home	screen.c	/^#define	home()		Placur(0, 0)$/
home_cur	pcscr.c	/^#define home_cur()	gotoxy(C_X = 0, C_Y = 0)$/
how_far	move.c	/^how_far(line, col)$/
i_blank	paragraph.c	/^i_blank(lp)$/
i_bsblank	paragraph.c	/^i_bsblank(lp)$/
i_lines	mac.c	/^i_lines(top, bottom, num)$/
i_set	screen.c	/^i_set(nline, ncol)$/
in_macro	macros.c	/^in_macro()$/
in_window	wind.c	/^in_window(windes, line)$/
init_43	pcscr.c	/^void init_43()$/
init_slate	mac.c	/^init_slate()$/
init_specials	insert.c	/^init_specials()$/
init_strokes	util.h	/^#define init_strokes()	{ keys_p = key_strokes; *ke/
init_term	pcscr.c	/^void init_term()$/
initlist	buf.c	/^initlist(b)$/
inlist	util.c	/^inlist(first, what)$/
inorder	util.c	/^inorder(nextp, char1, endp, char2)$/
ins_c	util.c	/^ins_c(c, buf, atchar, num, max)$/
ins_str	insert.c	/^ins_str(str, ok_nl)$/
insert	re.c	/^insert(off, endp, which)$/
insert_c	insert.c	/^insert_c(c, n)$/
inslines	mac.c	/^inslines(n,bot)$/
intr	pcscr.c	/^#define intr(n, r)	int86((n), (r), (r));$/
is_an_arg	argcount.h	/^#define is_an_arg()		(arg_supplied_p != NO)$/
is_dir	mac.c	/^is_dir(fname)$/
isdead	iproc-ptys.c	/^#define isdead(p)	((p) == NULL || proc_state((p)) /
isdir	ask.c	/^isdir(name)$/
isdirty	disp.h	/^#define isdirty(line)	((line)->l_dline & DIRTY)$/
isearch	re1.c	/^isearch(dir, bp)$/
isetup	mac.c	/^isetup(p)$/
ismword	ctype.c	/^ismword(c)$/
isprocbuf	proc.c	/^isprocbuf(bnm)$/
itoa	util.c	/^itoa(num)$/
jcloseall	jove.c	/^jcloseall()$/
jgetc	fp.h	/^#define jgetc(fp)	\\$/
jgetchar	jove.c	/^jgetchar()$/
jisalpha	ctype.h	/^#define	jisalpha(c)	(SyntaxTable[c]&(C_UPPER|C_LOW/
jisclosep	ctype.h	/^#define	jisclosep(c)	((CharTable[0][c&CHARMASK])&C/
jiscntrl	ctype.h	/^#define	jiscntrl(c)	((CharTable[0][c&CHARMASK])&C_/
jisdigit	ctype.h	/^#define	jisdigit(c)	(SyntaxTable[c]&C_DIGIT)$/
jislower	ctype.h	/^#define	jislower(c)	(SyntaxTable[c]&C_LOWER)$/
jisopenp	ctype.h	/^#define	jisopenp(c)	((CharTable[0][c&CHARMASK])&C_/
jisspace	ctype.h	/^#define	jisspace(c)	((c) == ' ' || (c) == '\\t')$/
jisupper	ctype.h	/^#define	jisupper(c)	(SyntaxTable[c]&C_UPPER)$/
jiswhite	ctype.h	/^#define	jiswhite(c)	(jisspace(c))$/
jisword	ctype.h	/^#define	jisword(c)	(SyntaxTable[c]&C_WORD)$/
joverc	extend.c	/^joverc(file)$/
jputc	fp.h	/^#define jputc(c, fp)	{ while (--(fp)->f_cnt < 0) f/
jputchar	fp.h	/^#define jputchar(c)	jputc((c), stdout)$/
jputs	fmt.c	/^jputs(str)$/
jscandir	scandir.c	/^jscandir(dir, nmptr, qualify, sorter)$/
jtolower	case.c	/^jtolower(c)$/
kill_buf	buf.c	/^kill_buf(delbuf)$/
kill_off	iproc.c	/^kill_off(pid, w)$/
killpg	sysdep.h	/^# define killpg(pid, sig)	kill(-(pid), (sig))$/
km_destroy	keymaps.c	/^km_destroy(km)$/
km_getkey	keymaps.c	/^#define km_getkey(m, c)	((m)->k_keys[(c) & CHARMAS/
km_lookup	keymaps.c	/^km_lookup(name)$/
km_new	keymaps.c	/^km_new(name, keys)$/
km_newname	keymaps.c	/^km_newname()$/
km_setkey	keymaps.c	/^km_setkey(m, c, d)$/
lastline	util.c	/^lastline(lp)$/
lastp	util.h	/^#define lastp(line)	((line) == curbuf->b_last)$/
lbptr	io.c	/^lbptr(line)$/
lcontents	util.c	/^lcontents(line)$/
len_error	util.c	/^len_error(flag)$/
length	util.c	/^length(line)$/
lfreelist	insert.c	/^lfreelist(first)$/
lfreereg	insert.c	/^lfreereg(line1, line2)$/
line_cnt	buf.c	/^line_cnt(b, buf, size)$/
line_feed	pcscr.c	/^void near line_feed()$/
line_move	move.c	/^line_move(dir, n, line_cmd)$/
linecopy	util.c	/^linecopy(onto, atchar, from)$/
lisp_indent	insert.c	/^lisp_indent()$/
list_data	list.h	/^#define list_data(lp)	((lp)->car)$/
list_new	list.c	/^list_new()$/
list_next	list.h	/^#define list_next(lp)	((lp)->cdr)$/
list_pop	list.c	/^list_pop(list)$/
list_push	list.c	/^list_push(list, element)$/
listput	insert.c	/^listput(buf, after)$/
lockblock	io.c	/^#define lockblock(addr)$/
look_at	re.c	/^look_at(expr)$/
lookup	io.c	/^lookup(bno)$/
lookup_abbrev	abbrev.c	/^lookup_abbrev(table, abbrev)$/
lower	case.c	/^lower(p)$/
lpp	pcscr.c	/^BYTE lpp()$/
lremove	delete.c	/^lremove(line1, line2)$/
lsave	io.c	/^lsave()$/
lseek	mac.c	/^lseek(fd,offset,type)	\/* The Mac version of this d/
ltobuf	util.c	/^ltobuf(line, buf)$/
ltoc	mac.c	/^ltoc()	\/* calculate ctlvalue for line position *\/$/
m_paren	c.c	/^m_paren(p_type, dir, can_mismatch, can_stop)$/
mac_exists	macros.c	/^mac_exists(name)$/
mac_getc	macros.c	/^mac_getc()$/
mac_init	macros.c	/^mac_init()$/
mac_putc	macros.c	/^mac_putc(c)$/
mak_buf	buf.c	/^mak_buf()$/
make_argv	util.c	/^make_argv(argv, ap)$/
make_cache	io.c	/^make_cache()	\/* Only 32K of static space on Mac, s/
make_edits	mac.c	/^make_edits(menu)	\/* add dummy edit menu *\/$/
make_scr	screen.c	/^make_scr()$/
makedead	iproc-ptys.c	/^#define makedead(p)	{ proc_state((p)) = DEAD; }$/
makedirty	disp.h	/^#define makedirty(line)	{ (line)->l_dline |= DIRTY/
makedisplay	mac.c	/^makedisplay()$/
makelist	mac.c	/^makelist()$/
match	extend.c	/^match(choices, what)$/
max	util.c	/^max(a, b)$/
max_line	paragraph.c	/^max_line(l1, l2)$/
maxadjust	mac.c	/^#define maxadjust(r) OffsetRect((r),0,2);$/
member	re.c	/^member(comp_ptr, c, af)$/
menus_off	mac.c	/^menus_off()$/
menus_on	mac.c	/^menus_on()$/
message	disp.c	/^message(str)$/
min	util.c	/^min(a, b)$/
min_line	paragraph.c	/^min_line(l1, l2)$/
minib_add	ask.c	/^minib_add(str, movedown)$/
mk_proc_km	keymaps.c	/^mk_proc_km()$/
mkbuflist	buf.c	/^mkbuflist(bnamp, ebnamp)$/
mktemp	mac.c	/^mktemp(name)$/
mode_app	disp.c	/^mode_app(str)$/
modify	util.c	/^modify()$/
mp_error	c.c	/^mp_error()$/
n_indent	insert.c	/^n_indent(goal)$/
nbufline	insert.c	/^nbufline()$/
negate_arg_value	argcount.h	/^#define negate_arg_value()	{ arg_count = -arg_coun/
newchunk	insert.c	/^newchunk()$/
next_line	util.c	/^next_line(line, num)$/
normfun	pcscr.c	/^void near normfun(c)$/
null_ncpy	util.c	/^null_ncpy(to, from, n)$/
numcomp	util.c	/^numcomp(s1, s2)$/
obj_type	dataobj.h	/^#define obj_type(o)	((o)->Type & TYPEMASK)$/
one_windp	wind.h	/^#define one_windp()	(fwind->w_next == fwind)$/
open	mac.c	/^open(name,mode)$/
open_file	io.c	/^open_file(fname, buf, how, complainifbad, quiet)$/
open_lines	insert.c	/^open_lines(n)$/
opendir	scandir.c	/^opendir(dir)$/
outld	fmt.c	/^outld(d, base)$/
p_refresh	mac.c	/^p_refresh()$/
pad	fmt.c	/^pad(c, amount)$/
parse_cmt_fmt	c.c	/^parse_cmt_fmt(str)$/
patchup	delete.c	/^patchup(line1, char1, line2, char2)$/
pbuftiedp	iproc.c	/^pbuftiedp(b)$/
pfile	mac.c	/^pfile(namebuf)$/
pinit	iproc-ptys.c	/^pinit()$/
pipeclose	util.c	/^pipeclose(p)$/
pnt_line	util.c	/^pnt_line()$/
pop_env	util.c	/^pop_env(savejmp)$/
pop_macro_stack	macros.c	/^pop_macro_stack()$/
pop_wind	wind.c	/^pop_wind(name, clobber, btype)$/
pp_key_strokes	util.c	/^pp_key_strokes(buffer, size)$/
prCTIME	misc.c	/^prCTIME()$/
prCWD	io.c	/^prCWD()$/
prDIRS	io.c	/^prDIRS()$/
pr_name	io.c	/^pr_name(fname, okay_home)$/
pr_putc	macros.c	/^pr_putc(c, fp)$/
prev_line	util.c	/^prev_line(line, num)$/
printbind	mac.c	/^printbind(f,buf)$/
proc_buf	iproc-ptys.c	/^#define proc_buf(p)	((p)->p_buffer->b_name)$/
proc_child	iproc.c	/^proc_child(junk)$/
proc_close	iproc-ptys.c	/^proc_close(p)$/
proc_cmd	iproc-ptys.c	/^#define proc_cmd(p)	((p)->p_name)$/
proc_kill	iproc.c	/^proc_kill(p, sig)$/
proc_pid	iproc-ptys.c	/^proc_pid(pid)$/
proc_rec	iproc.c	/^proc_rec(p, buf)$/
proc_state	iproc-ptys.c	/^#define proc_state(p)	((p)->p_state)$/
proc_strt	iproc-ptys.c	/^proc_strt(char *bufname, int clobber, ...)$/
proc_write	iproc-ptys.c	/^proc_write(p, buf, nbytes)$/
proto	jove.h	/^# define proto(x)        x$/
pstate	iproc.c	/^pstate(p)$/
ptoxy	mac.c	/^ptoxy(p,row,col)	\/* convert Point to terminal x,y /
ptrproto	jove.h	/^#  define ptrproto(x)		()$/
push_env	util.c	/^push_env(savejmp)$/
push_macro_stack	macros.c	/^push_macro_stack(m, count)$/
put_bufs	misc.c	/^put_bufs(askp)$/
putaddr	rec.c	/^putaddr(addr, p)$/
putargpad	term.c	/^putargpad(str, arg, lines)$/
putcurs	mac.c	/^putcurs(row,col,vis)$/
putld	fmt.c	/^putld(d, base)$/
putline	io.c	/^putline(buf)$/
putmatch	re.c	/^putmatch(which, buf, size)$/
putn	rec.c	/^putn(cp, nbytes)$/
putp	mac.c	/^putp(p)			\/* put one character, advance cursor *\/$/
putpad	term.c	/^putpad(str, lines)$/
putreg	io.c	/^putreg(fp, line1, char1, line2, char2, makesure)$/
putstr	fp.c	/^putstr(s)$/
pwd	io.c	/^pwd()$/
quad_numeric_arg	argcount.c	/^quad_numeric_arg()$/
raw_complain	jove.c	/^raw_complain(const char *fmt, ...)$/
raw_scream	jove.c	/^raw_scream(m)$/
rawchkc	mac.c	/^rawchkc()$/
rawgetc	mac.c	/^rawgetc()$/
rawkey_ready	getch.c	/^rawkey_ready()$/
rbell	disp.c	/^rbell()$/
rbwrite	fp.c	/^rbwrite(fd, buf, cnt)$/
re_dosub	re.c	/^re_dosub(re_blk, tobuf, delp)$/
re_indent	c.c	/^re_indent(incr)$/
re_lindex	re.c	/^re_lindex(line, offset, dir, re_blk, lbuf_okay, cr/
read	mac.c	/^read(fd,buf,n)$/
read_file	io.c	/^read_file(file, is_insert)$/
read_proc	iproc-ptys.c	/^read_proc(fd)$/
readdir	scandir.c	/^readdir(dp)$/
real_ask	ask.c	/^real_ask(delim, d_proc, def, prompt)$/
real_blkio	io.c	/^real_blkio(b, iofcn)$/
recclose	rec.c	/^recclose()$/
recinit	rec.c	/^recinit()$/
recremove	rec.c	/^recremove()$/
redisplay	disp.c	/^redisplay()$/
reg_delete	delete.c	/^reg_delete(line1, char1, line2, char2)$/
reg_kill	delete.c	/^reg_kill(line2, char2, dot_moved)$/
remfreelines	insert.c	/^remfreelines(c)$/
replace	re1.c	/^replace(query, inreg)$/
reset_43	pcscr.c	/^void reset_43()$/
rest_abbrevs	abbrev.c	/^rest_abbrevs(file)$/
rtowind	mac.c	/^rtowind(row)	\/* return jove window row is in *\/$/
s_mess	fmt.c	/^s_mess(const char *fmt, ...)$/
save_abbrevs	abbrev.c	/^save_abbrevs(file)$/
scanvec	jove.c	/^scanvec(args, str)$/
scr_up	pcscr.c	/^#define scr_up()		scr_win(1, 0, 0, LPP-1, CHPL-1)$/
scr_win	pcscr.c	/^void near scr_win(no, ulr, ulc, lrr, lrc)$/
search	re.c	/^search(dir, re, setdefault)$/
send_p	iproc-ptys.c	/^send_p(c)$/
setCWD	io.c	/^setCWD(d)$/
set_arg_value	argcount.h	/^#define set_arg_value(n)	{ arg_supplied_p = YES; a/
set_cur	pcscr.c	/^void near set_cur(xy)$/
set_ino	buf.c	/^set_ino(b)$/
set_is_an_arg	argcount.h	/^#define set_is_an_arg(there_is)	{ arg_supplied_p =/
set_mark	marks.c	/^set_mark()$/
set_mode	pcscr.c	/^void near set_mode(n)$/
set_wsize	proc.c	/^set_wsize(wsize)$/
setblock	jove.c	/^setblock(fd, on)	\/* turn blocking on or off *\/$/
setbname	buf.c	/^setbname(b, name)$/
setcolor	pcscr.c	/^void setcolor(fg, bg)$/
setdir	mac.c	/^setdir(vol,dir)$/
setfname	buf.c	/^setfname(b, name)$/
setsearch	re.c	/^setsearch(str)$/
settout	term.c	/^settout(ttbuf)$/
signal	mac.c	/^(*signal(sig,func)) proto((int))$/
sindex	util.c	/^sindex(pattern, string)$/
skip_wht_space	misc.c	/^skip_wht_space()$/
slowpoke	util.c	/^slowpoke(junk)$/
sprint	fmt.c	/^sprint(const char *fmt, ...)$/
sput_end	screen.c	/^sput_end()$/
sput_start	screen.c	/^sput_start()$/
sputc	screen.c	/^sputc(c)$/
stat	mac.c	/^stat(fname,buf)$/
std_state	mac.c	/^#define std_state(w) (*((WStateData **)((WindowPee/
strerror	util.c	/^strerror(errnum)$/
strip_c	c.c	/^strip_c(from, to)$/
substitute	re1.c	/^substitute(re_blk, query, l1, char1, l2, char2)$/
switchar	proc.c	/^switchar()$/
swrite	screen.c	/^swrite(line, inversep, abortable)$/
swritef	fmt.c	/^swritef(char *str, size_t size, const char *fmt, ./
tailrule	paragraph.c	/^tailrule(lp)$/
tiewind	util.c	/^tiewind(w, bp)$/
tmpclose	io.c	/^tmpclose()$/
tmpinit	io.c	/^tmpinit()$/
tmpremove	io.c	/^tmpremove()$/
tn_init	mac.c	/^tn_init()$/
to_sent	move.c	/^to_sent(dir)$/
to_word	util.c	/^to_word(dir)$/
tputc	term.c	/^tputc(c)$/
ttinit	jove.c	/^ttinit()$/
ttsize	jove.c	/^ttsize()$/
tty_reset	jove.c	/^tty_reset()$/
ttyset	jove.c	/^ttyset(n)$/
unlink	mac.c	/^unlink(name)$/
unmodify	util.c	/^unmodify()$/
unwind_macro_stack	macros.c	/^unwind_macro_stack()$/
updmode	jove.c	/^updmode(junk)$/
upper	case.c	/^upper(p)$/
user_state	mac.c	/^#define user_state(w) (*((WStateData **)((WindowPe/
v_clear	disp.c	/^v_clear(line1, line2)$/
v_del_line	screen.c	/^v_del_line(num, top, bottom)$/
v_ins_line	screen.c	/^v_ins_line(num, top, bottom)$/
va_arg	mac.h	/^#define va_arg(l,m) (((m*)((l) += sizeof(m)))[-1])/
va_end	mac.h	/^#define va_end(l) { (l) = NULL; }$/
va_init	jove.h	/^# define	va_init(ap, parmN)	{ va_start((ap), (parm/
va_start	mac.h	/^#define va_start(l) { (l) = (va_list)&va_alist; }$/
valid_bp	buf.c	/^valid_bp(bp)$/
vpr_aux	extend.c	/^vpr_aux(vp, buf, size)$/
w_nam_typ	wind.c	/^w_nam_typ(name, type)$/
w_termsignum	wait.h	/^# define w_termsignum(w)	((w).w_termsig)$/
wait2	wait.h	/^# define wait2(w, x)		wait(w)$/
waitchar	util.c	/^waitchar(slow)$/
waitfun	getch.c	/^waitfun()$/
watch_input	iproc.c	/^watch_input(m)$/
wc_adjust	mac.c	/^wc_adjust(w,h,wcf,init)		\/* adjust window config t/
wherex	pcscr.c	/^#define wherex()	C_X$/
wherexy	pcscr.c	/^void near wherexy( x, y)$/
wherey	pcscr.c	/^#define wherey()	C_Y$/
win_reshape	jove.c	/^win_reshape(junk)$/
windbp	wind.c	/^windbp(bp)$/
windtol	mac.c	/^windtol(w,row)		\/* return line for row in window */
winit	wind.c	/^winit()$/
within_indent	util.c	/^within_indent()$/
wrch	pcscr.c	/^#define wrch(c)		ch_out((c), 1), cur_advance()$/
write	mac.c	/^write(fd,buf,n)$/
write_em	pcscr.c	/^void write_em(s)$/
write_emc	pcscr.c	/^void write_emc(s, n)$/
write_emif	pcscr.c	/^void write_emif(s)$/
writechr	mac.c	/^writechr(start)$/
writef	fmt.c	/^writef(const char *fmt, ...)$/
yes_or_no_p	ask.c	/^yes_or_no_p(char *fmt, ...)$/
