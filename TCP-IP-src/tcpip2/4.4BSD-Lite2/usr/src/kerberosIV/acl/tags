COR	acl_files.c	/^#define COR(a,b) ((a!=NULL)?(a):(b))$/
MAX	acl_files.c	/^#define MAX(a,b) (((a)>(b))?(a):(b))$/
MIN	acl_files.c	/^#define MIN(a,b) (((a)<(b))?(a):(b))$/
acl_abort	acl_files.c	/^static int acl_abort(acl_file, f)$/
acl_add	acl_files.c	/^acl_add(acl, principal)$/
acl_canonicalize_principal	acl_files.c	/^acl_canonicalize_principal(principal, canon)$/
acl_check	acl_files.c	/^acl_check(acl, principal)$/
acl_commit	acl_files.c	/^static int acl_commit(acl_file, f)$/
acl_delete	acl_files.c	/^acl_delete(acl, principal)$/
acl_exact_match	acl_files.c	/^acl_exact_match(acl, principal)$/
acl_initialize	acl_files.c	/^int acl_initialize(acl_file, perm)$/
acl_load	acl_files.c	/^static int acl_load(name)$/
acl_lock_file	acl_files.c	/^static FILE *acl_lock_file(acl_file)$/
add_hash	acl_files.c	/^static add_hash(h, el)$/
check_hash	acl_files.c	/^static check_hash(h, el)$/
destroy_hash	acl_files.c	/^static destroy_hash(h)$/
hashval	acl_files.c	/^static unsigned hashval(s)$/
make_hash	acl_files.c	/^static struct hashtbl *make_hash(size)$/
nuke_whitespace	acl_files.c	/^static nuke_whitespace(buf)$/
