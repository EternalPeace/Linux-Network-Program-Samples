DICT	look.c	/^#define	DICT(c)	(isascii(c) && isalnum(c) ? (c) : /
FOLD	look.c	/^#define	FOLD(c)	(isascii(c) && isupper(c) ? tolowe/
Mlook	look.c	/^main(argc, argv)$/
SKIP_PAST_NEWLINE	look.c	/^#define	SKIP_PAST_NEWLINE(p, back) \\$/
binary_search	look.c	/^binary_search(string, front, back)$/
compare	look.c	/^compare(s1, s2, back)$/
err	look.c	/^err(fmt, va_alist)$/
linear_search	look.c	/^linear_search(string, front, back)$/
look	look.c	/^look(string, front, back)$/
print_from	look.c	/^print_from(string, front, back)$/
usage	look.c	/^usage()$/
