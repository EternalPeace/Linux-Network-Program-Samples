ERROR(1)                     BSD Reference Manual                     ERROR(1)

NNAAMMEE
     eerrrroorr - analyze and disperse compiler error messages

SSYYNNOOPPSSIISS
     eerrrroorr [--nn] [--ss] [--qq] [--vv] [--tt _s_u_f_f_i_x_l_i_s_t] [--II _i_g_n_o_r_e_f_i_l_e] [name]

DDEESSCCRRIIPPTTIIOONN
     EErrrroorr analyzes and optionally disperses the diagnostic error messages
     produced by a number of compilers and language processors to the source
     file and line where the errors occurred.  It can replace the painful,
     traditional methods of scribbling abbreviations of errors on paper, and
     permits error messages and source code to be viewed simultaneously with-
     out machinations of multiple windows in a screen editor.

     Options are:

     --nn      Do _n_o_t touch any files; all error messages are sent to the stan-
             dard output.

     --qq      The user is _q_u_e_r_i_e_d whether s/he wants to touch the file.  A
             ``y'' or ``n'' to the question is necessary to continue.  Absence
             of the --qq option implies that all referenced files (except those
             referring to discarded error messages) are to be touched.

     --vv      After all files have been touched, overlay the visual editor
             vi(1) with it set up to edit all files touched, and positioned in
             the first touched file at the first error.  If vi(1) can't be
             found, try ex(1) or ed(1) from standard places.

     --tt      Take the following argument as a suffix list.  Files whose suf-
             fixes do not appear in the suffix list are not touched.  The suf-
             fix list is dot separated, and ``*'' wildcards work.  Thus the
             suffix list:

                   .c.y.foo*.h

             allows eerrrroorr to touch files ending with ``.c'', ``.y'', ``.foo*''
             and ``.y''.

     --ss      Print out _s_t_a_t_i_s_t_i_c_s regarding the error categorization.  Not too
             useful.

     EErrrroorr looks at the error messages, either from the specified file _n_a_m_e or
     from the standard input, and attempts to determine which language proces-
     sor produced each error message, determines the source file and line num-
     ber to which the error message refers, determines if the error message is
     to be ignored or not, and inserts the (possibly slightly modified) error
     message into the source file as a comment on the line preceding to which
     the line the error message refers.  Error messages which can't be catego-
     rized by language processor or content are not inserted into any file,
     but are sent to the standard output.  EErrrroorr touches source files only af-
     ter all input has been read.

     EErrrroorr is intended to be run with its standard input connected via a pipe
     to the error message source.  Some language processors put error messages
     on their standard error file; others put their messages on the standard
     output.  Hence, both error sources should be piped together into eerrrroorr.
     For example, when using the csh(1) syntax,

           make -s lint | error -q -v

     will analyze all the error messages produced by whatever programs make(1)
     runs when making lint.

     EErrrroorr knows about the error messages produced by: make(1),  cc(1),
     cpp(1),  ccom(1),  as(1),  ld(1),  lint(1),  pi(1),  pc(1),  f77(1),  and
     _D_E_C _W_e_s_t_e_r_n _R_e_s_e_a_r_c_h _M_o_d_u_l_a_-_2. EErrrroorr knows a standard format for error
     messages produced by the language processors, so is sensitive to changes
     in these formats.  For all languages except _P_a_s_c_a_l, error messages are
     restricted to be on one line.  Some error messages refer to more than one
     line in more than one files; eerrrroorr will duplicate the error message and
     insert it at all of the places referenced.

     EErrrroorr will do one of six things with error messages.

     _s_y_n_c_h_r_o_n_i_z_e
                 Some language processors produce short errors describing
                 which file it is processing.  EErrrroorr uses these to determine
                 the file name for languages that don't include the file name
                 in each error message.  These synchronization messages are
                 consumed entirely by eerrrroorr.

     _d_i_s_c_a_r_d     Error messages from lint(1) that refer to one of the two
                 lint(1) libraries, _/_u_s_r_/_l_i_b_d_a_t_a_/_l_i_n_t_/_l_l_i_b_-_l_c and
                 _/_u_s_r_/_l_i_b_d_a_t_a_/_l_i_n_t_/_l_l_i_b_-_p_o_r_t are discarded, to prevent acci-
                 dently touching these libraries.  Again, these error messages
                 are consumed entirely by eerrrroorr.

     _n_u_l_l_i_f_y     Error messages from lint(1) can be nullified if they refer to
                 a specific function, which is known to generate diagnostics
                 which are not interesting.  Nullified error messages are not
                 inserted into the source file, but are written to the stan-
                 dard output.  The names of functions to ignore are taken from
                 either the file named _._e_r_r_o_r_r_c in the users's home directory,
                 or from the file named by the --II option.  If the file does
                 not exist, no error messages are nullified.  If the file does
                 exist, there must be one function name per line.

     _n_o_t _f_i_l_e _s_p_e_c_i_f_i_c
                 Error messages that can't be intuited are grouped together,
                 and written to the standard output before any files are
                 touched.  They will not be inserted into any source file.

     _f_i_l_e _s_p_e_c_i_f_i_c
                 Error message that refer to a specific file, but to no spe-
                 cific line, are written to the standard output when that file
                 is touched.

     _t_r_u_e _e_r_r_o_r_s
                 Error messages that can be intuited are candidates for inser-
                 tion into the file to which they refer.

     Only true error messages are candidates for inserting into the file they
     refer to.  Other error messages are consumed entirely by eerrrroorr or are
     written to the standard output.  EErrrroorr inserts the error messages into
     the source file on the line preceding the line the language processor
     found in error.  Each error message is turned into a one line comment for
     the language, and is internally flagged with the string ``###'' at the
     beginning of the error, and ``%%%'' at the end of the error.  This makes
     pattern searching for errors easier with an editor, and allows the mes-
     sages to be easily removed.  In addition, each error message contains the
     source line number for the line the message refers to.  A reasonably for-
     matted source program can be recompiled with the error messages still in
     it, without having the error messages themselves cause future errors.
     For poorly formatted source programs in free format languages, such as C
     or Pascal, it is possible to insert a comment into another comment, which
     can wreak havoc with a future compilation.  To avoid this, programs with
     comments and source on the same line should be formatted so that language
     statements appear before comments.

     EErrrroorr catches interrupt and terminate signals, and if in the insertion
     phase, will orderly terminate what it is doing.

FFIILLEESS
     ~/.errorrc  function names to ignore for lint(1) error messages
     /dev/tty    user's teletype

HHIISSTTOORRYY
     The eerrrroorr command appeared in 4.0BSD.

AAUUTTHHOORR
     Robert Henry

BBUUGGSS
     Opens the teletype directly to do user querying.

     Source files with links make a new copy of the file with only one link to
     it.

     Changing a language processor's format of error messages may cause eerrrroorr
     to not understand the error message.

     EErrrroorr, since it is purely mechanical, will not filter out subsequent er-
     rors caused by `floodgating' initiated by one syntactically trivial er-
     ror.  Humans are still much better at discarding these related errors.

     Pascal error messages belong after the lines affected (error puts them
     before).  The alignment of the `\' marking the point of error is also
     disturbed by eerrrroorr.

     EErrrroorr was designed for work on CRT's at reasonably high speed.  It is
     less pleasant on slow speed terminals, and has never been used on hard-
     copy terminals.

4th Berkeley Distribution        June 6, 1993                                3
