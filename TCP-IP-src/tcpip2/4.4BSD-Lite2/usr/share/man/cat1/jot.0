


JOT(1)                 BSD Reference Manual                JOT(1)


NNAAMMEE
       jot - print sequential or random data

SSYYNNOOPPSSIISS
       jjoott [[ options ]] [[ reps [[ begin [[ end [[ s ]] ]] ]] ]]

DDEESSCCRRIIPPTTIIOONN
       _J_o_t  is  used to print out increasing, decreasing, random,
       or redundant data, usually numbers,  one  per  line.   The
       _o_p_t_i_o_n_s are understood as follows.

       --rr     Generate  random  data  instead of sequential data,
              the default.

       --bb word
              Just print _w_o_r_d repetitively.

       --ww word
              Print _w_o_r_d with the generated data appended to  it.
              Octal,   hexadecimal,   exponential,   ASCII,  zero
              padded, and right-adjusted representations are pos-
              sible by using the appropriate _p_r_i_n_t_f(3) conversion
              specification inside _w_o_r_d, in which case  the  data
              are inserted rather than appended.

       --cc     This is an abbreviation for --ww %%cc.

       --ss string
              Print data separated by _s_t_r_i_n_g.  Normally, newlines
              separate data.

       --nn     Do not print the final newline normally appended to
              the output.

       --pp precision
              Print only as many digits or characters of the data
              as indicated by  the  integer  _p_r_e_c_i_s_i_o_n.   In  the
              absence  of --pp, the precision is the greater of the
              precisions of _b_e_g_i_n and  _e_n_d.   The  --pp  option  is
              overridden  by whatever appears in a _p_r_i_n_t_f(3) con-
              version following --ww.

       The last four arguments indicate, respectively, the number
       of  data,  the  lower bound, the upper bound, and the step
       size or, for random data, the seed.  While at least one of
       them  must  appear, any of the other three may be omitted,
       and will be considered as such if given as --.   Any  three
       of  these  arguments  determines  the fourth.  If four are
       specified and the given and computed values of  _r_e_p_s  con-
       flict,  the  lower value is used.  If fewer than three are
       specified, defaults are assigned left to right, except for



4th Berkeley Distribution  June 6, 1993                         1








JOT(1)                 BSD Reference Manual                JOT(1)


       _s, which assumes its default unless both _b_e_g_i_n and _e_n_d are
       given.

       Defaults for the four arguments are, respectively, 100, 1,
       100,  and 1, except that when random data are requested, _s
       defaults to a seed depending upon the time of  day.   _R_e_p_s
       is  expected  to  be  an unsigned integer, and if given as
       zero is taken to be infinite.  _B_e_g_i_n and _e_n_d may be  given
       as  real  numbers or as characters representing the corre-
       sponding value in ASCII.  The last argument must be a real
       number.

       Random  numbers  are obtained through _r_a_n_d_o_m(3).  The name
       _j_o_t derives in part from _i_o_t_a, a function in APL.

EEXXAAMMPPLLEESS
       The command

              jjoott   2211   --11   11..0000

       prints 21 evenly spaced numbers increasing from -1  to  1.
       The ASCII character set is generated with

              jjoott   --cc   112288   00

       and the strings xaa through xaz with

              jjoott   --ww   xxaa%%cc   2266   aa

       while 20 random 8-letter strings are produced with

              jjoott    --rr    --cc   116600   aa   zz   ||   rrss   --gg   00   88

       Infinitely many _y_e_s's may be obtained through

              jjoott   --bb   yyeess   00

       and thirty _e_d(1) substitution commands applying  to  lines
       2, 7, 12, etc. is the result of

              jjoott   --ww   %%ddss//oolldd//nneeww//   3300   22   --   55

       The  stuttering  sequence  9, 9, 8, 8, 7, etc. can be pro-
       duced by suitable choice of precision and step size, as in

              jjoott   00   99   --   --..55

       and a file containing exactly 1024 bytes is created with

              jjoott   --bb   xx   551122   >>   bblloocckk




4th Berkeley Distribution  June 6, 1993                         2








JOT(1)                 BSD Reference Manual                JOT(1)


       Finally,  to set tabs four spaces apart starting from col-
       umn 10 and ending in column 132, use

              eexxppaanndd   --``jjoott   --ss,,   --   1100   113322   44``

       and to print all lines 80 characters or longer,

              ggrreepp   ``jjoott   --ss   """"   --bb   ..   8800``


SSEEEE AALLSSOO
       ed(1), expand(1),  rs(1),  yes(1),  printf(3),  random(3),
       expand(1)









































4th Berkeley Distribution  June 6, 1993                         3





