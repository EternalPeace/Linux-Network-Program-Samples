WINDOW(1)                    BSD Reference Manual                    WINDOW(1)

NNAAMMEE
     wwiinnddooww - window environment

SSYYNNOOPPSSIISS
     wwiinnddooww [--tt] [--ff] [--dd] [--ee _e_s_c_a_p_e_-_c_h_a_r] [--cc _c_o_m_m_a_n_d]

DDEESSCCRRIIPPTTIIOONN
     WWiinnddooww implements a window environment on ASCII terminals.

     A window is a rectangular portion of the physical terminal screen associ-
     ated with a set of processes.  Its size and position can be changed by
     the user at any time.  Processes communicate with their window in the
     same way they normally interact with a terminal-through their standard
     input, output, and diagnostic file descriptors.  The window program han-
     dles the details of redirecting input and output to and from the windows.
     At any one time, only one window can receive input from the keyboard, but
     all windows can simultaneously send output to the display.

     When wwiinnddooww starts up, the commands (see long commands below) contained
     in the file _._w_i_n_d_o_w_r_c in the user's home directory are executed.  If it
     does not exist, two equal sized windows spanning the terminal screen are
     created by default.

     The command line options are

     --tt          Turn on terse mode (see tteerrssee command below).

     --ff          Fast.  Don't perform any startup action.

     --dd          Ignore _._w_i_n_d_o_w_r_c and create the two default windows instead.

     --ee _e_s_c_a_p_e_-_c_h_a_r
                 Set the escape character to _e_s_c_a_p_e_-_c_h_a_r. _E_s_c_a_p_e_-_c_h_a_r can be a
                 single character, or in the form ^^XX where _X is any character,
                 meaning control-_X.

     --cc _c_o_m_m_a_n_d  Execute the string _c_o_m_m_a_n_d as a long command (see below) be-
                 fore doing anything else.

     Windows can overlap and are framed as necessary.  Each window is named by
     one of the digits ``1'' to ``9''.  This one-character identifier, as well
     as a user definable label string, are displayed with the window on the
     top edge of its frame.  A window can be designated to be in the
     _f_o_r_e_g_r_o_u_n_d, in which case it will always be on top of all normal, non-
     foreground windows, and can be covered only by other foreground windows.
     A window need not be completely within the edges of the terminal screen.
     Thus a large window (possibly larger than the screen) may be positioned
     to show only a portion of its full size.

     Each window has a cursor and a set of control functions.  Most intelli-
     gent terminal operations such as line and character deletion and inser-
     tion are supported.  Display modes such as underlining and reverse video
     are available if they are supported by the terminal.  In addition, simi-
     lar to terminals with multiple pages of memory, each window has a text
     buffer which can have more lines than the window itself.

   PPrroocceessss EEnnvviirroonnmmeenntt
     With each newly created window, a shell program is spawned with its pro-
     cess environment tailored to that window.  Its standard input, output,
     and diagnostic file descriptors are bound to one end of either a pseudo-
     terminal (pty(4))  or a UNIX domain socket (socketpair(4)).  If a pseudo-
     terminal is used, then its special characters and modes (see stty(1))
     are copied from the physical terminal.  A termcap(5) entry tailored to
     this window is created and passed as environment (environ(5))  variable
     TERMCAP. The termcap entry contains the window's size and characteristics
     as well as information from the physical terminal, such as the existence
     of underline, reverse video, and other display modes, and the codes pro-
     duced by the terminal's function keys, if any.  In addition, the window
     size attributes of the pseudo-terminal are set to reflect the size of
     this window, and updated whenever it is changed by the user.  In particu-
     lar, the editor vi(1) uses this information to redraw its display.

   OOppeerraattiioonn
     During normal execution, wwiinnddooww can be in one of two states: conversation
     mode and command mode.  In conversation mode, the terminal's real cursor
     is placed at the cursor position of a particular window--called the cur-
     rent window--and input from the keyboard is sent to the process in that
     window.  The current window is always on top of all other windows, except
     those in foreground.  In addition, it is set apart by highlighting its
     identifier and label in reverse video.

     Typing wwiinnddooww's escape character (normally ^^PP) in conversation mode
     switches it into command mode.  In command mode, the top line of the ter-
     minal screen becomes the command prompt window, and wwiinnddooww interprets in-
     put from the keyboard as commands to manipulate windows.

     There are two types of commands: short commands are usually one or two
     key strokes; long commands are strings either typed by the user in the
     command window (see the ``::'' command below), or read from a file (see
     ssoouurrccee below).

   SShhoorrtt CCoommmmaannddss
     Below, _# represents one of the digits ``1'' to ``9'' corresponding to the
     windows 1 to 9.  ^^XX means control-_X, where _X is any character.  In par-
     ticular, ^^^^ is control-^. _E_s_c_a_p_e is the escape key, or ^^[[.

     _#       Select window _# as the current window and return to conversation
             mode.

     %%_#      Select window _# but stay in command mode.

     ^^^^      Select the previous window and return to conversation mode.  This
             is useful for toggling between two windows.

     eessccaappee  Return to conversation mode.

     ^^PP      Return to conversation mode and write ^^PP to the current window.
             Thus, typing two ^^PP's in conversation mode sends one to the cur-
             rent window.  If the wwiinnddooww escape is changed to some other char-
             acter, that character takes the place of ^^PP here.

     ??       List a short summary of commands.

     ^^LL      Refresh the screen.

     qq       Exit wwiinnddooww. Confirmation is requested.

     ^^ZZ      Suspend wwiinnddooww.

     ww       Create a new window.  The user is prompted for the positions of
             the upper left and lower right corners of the window.  The cursor
             is placed on the screen and the keys ``h'', ``j'', ``k'', and
             ``l'' move the cursor left, down, up, and right, respectively.
             The keys ``H'', ``J'', ``K'', and ``L'' move the cursor to the
             respective limits of the screen.  Typing a number before the
             movement keys repeats the movement that number of times.  Return
             enters the cursor position as the upper left corner of the win-
             dow.  The lower right corner is entered in the same manner.  Dur-
             ing this process, the placement of the new window is indicated by
             a rectangular box drawn on the screen, corresponding to where the
             new window will be framed.  Typing escape at any point cancels
             this command.

             This window becomes the current window, and is given the first
             available ID.  The default buffer size is used (see _d_e_f_a_u_l_t___n_l_i_n_e
             command below).

             Only fully visible windows can be created this way.

     cc_#      Close window _#. The process in the window is sent the hangup sig-
             nal (see kill(1)).  Csh(1) should handle this signal correctly
             and cause no problems.

     mm_#      Move window _# to another location.  A box in the shape of the
             window is drawn on the screen to indicate the new position of the
             window, and the same keys as those for the ww command are used to
             position the box.  The window can be moved partially off-screen.

     MM_#      Move window _# to its previous position.

     ss_#      Change the size of window _#. The user is prompted to enter the
             new lower right corner of the window.  A box is drawn to indicate
             the new window size.  The same keys used in ww and mm are used to
             enter the position.

     SS_#      Change window _# to its previous size.

     ^^YY      Scroll the current window up by one line.

     ^^EE      Scroll the current window down by one line.

     ^^UU      Scroll the current window up by half the window size.

     ^^DD      Scroll the current window down by half the window size.

     ^^BB      Scroll the current window up by the full window size.

     ^^FF      Scroll the current window down by the full window size.

     hh       Move the cursor of the current window left by one column.

     jj       Move the cursor of the current window down by one line.

     kk       Move the cursor of the current window up by one line.

     ll       Move the cursor of the current window right by one column.

     yy       Yank.  The user is prompted to enter two points within the cur-
             rent window.  Then the content of the current window between
             those two points is saved in the yank buffer.

     pp       Put.  The content of the yank buffer is written to the current
             window as input.

     ^^SS      Stop output in the current window.

     ^^QQ      Start output in the current window.

     :       Enter a line to be executed as long commands.  Normal line edit-
             ing characters (erase character, erase word, erase line) are sup-
             ported.

   LLoonngg CCoommmmaannddss
     Long commands are a sequence of statements parsed much like a programming
     language, with a syntax similar to that of C.  Numeric and string expres-
     sions and variables are supported, as well as conditional statements.

     There are two data types: string and number.  A string is a sequence of
     letters or digits beginning with a letter.  ``_'' and ``.'' are consid-
     ered letters.  Alternately, non-alphanumeric characters can be included
     in strings by quoting them in ``"'' or escaping them with ``\''.  In ad-
     dition, the ``\'' sequences of C are supported, both inside and outside
     quotes (e.g., ``\n'' is a new line, ``\r'' a carriage return).  For exam-
     ple, these are legal strings: abcde01234, "&#$^*&#", ab"$#"cd, ab\$\#cd,
     "/usr/ucb/window".

     A number is an integer value in one of three forms: a decimal number, an
     octal number preceded by ``0'', or a hexadecimal number preceded by
     ``0x'' or ``0X''.  The natural machine integer size is used (i.e., the
     signed integer type of the C compiler).  As in C, a non-zero number rep-
     resents a boolean true.

     The character ``#'' begins a comment which terminates at the end of the
     line.

     A statement is either a conditional or an expression.  Expression state-
     ments are terminated with a new line or ``;''.  To continue an expression
     on the next line, terminate the first line with ``\''.

   CCoonnddiittiioonnaall SSttaatteemmeenntt
     WWiinnddooww has a single control structure: the fully bracketed if statement
     in the form

           if <expr> then
           <statement>
           ...
           elsif <expr> then
           <statement>
           ...
           else
           <statement>
           ...
           endif

     The eellssee and eellssiiff parts are optional, and the latter can be repeated any
     number of times.  <Expr> must be numeric.

   EExxpprreessssiioonnss
     Expressions in wwiinnddooww are similar to those in the C language, with most C
     operators supported on numeric operands.  In addition, some are overload-
     ed to operate on strings.

     When an expression is used as a statement, its value is discarded after
     evaluation.  Therefore, only expressions with side effects (assignments
     and function calls) are useful as statements.

     Single valued (no arrays) variables are supported, of both numeric and
     string values.  Some variables are predefined.  They are listed below.

     The operators in order of increasing precedence:

     <_e_x_p_r_1> == <_e_x_p_r_2>
                 Assignment.  The variable of name <_e_x_p_r_1>, which must be
                 string valued, is assigned the result of <_e_x_p_r_2>. Returns the
                 value of <_e_x_p_r_2>.

     <_e_x_p_r_1> ?? <_e_x_p_r_2> : <_e_x_p_r_3>
                 Returns the value of <_e_x_p_r_2> if <_e_x_p_r_1> evaluates true (non-
                 zero numeric value); returns the value of <_e_x_p_r_3> otherwise.
                 Only one of <_e_x_p_r_2> and <_e_x_p_r_3> is evaluated.  <_E_x_p_r_1> must

                 be numeric.

     <_e_x_p_r_1> |||| <_e_x_p_r_2>
                 Logical or.  Numeric values only.  Short circuit evaluation
                 is supported (i.e., if <_e_x_p_r_1> evaluates true, then <_e_x_p_r_2>
                 is not evaluated).

     <_e_x_p_r_1> &&&& <_e_x_p_r_2>
                 Logical and with short circuit evaluation.  Numeric values
                 only.

     <_e_x_p_r_1> || <_e_x_p_r_2>
                 Bitwise or.  Numeric values only.

     <_e_x_p_r_1> ^^ <_e_x_p_r_2>
                 Bitwise exclusive or.  Numeric values only.

     <_e_x_p_r_1> && <_e_x_p_r_2>
                 Bitwise and.  Numeric values only.

     <_e_x_p_r_1> ==== <_e_x_p_r_2>, <_e_x_p_r_1> !!== <expr2>
                 Comparison (equal and not equal, respectively).  The boolean
                 result (either 1 or 0) of the comparison is returned.  The
                 operands can be numeric or string valued.  One string operand
                 forces the other to be converted to a string in necessary.

     <_e_x_p_r_1> << <_e_x_p_r_2>, <_e_x_p_r_1> >> <_e_x_p_r_2>, <_e_x_p_r_1> <<== <_e_x_p_r_2>,
                 Less than, greater than, less than or equal to, greater than
                 or equal to.  Both numeric and string values, with automatic
                 conversion as above.

     <_e_x_p_r_1> <<<< <_e_x_p_r_2>, <_e_x_p_r_1> >>>> <_e_x_p_r_2>
                 If both operands are numbers, <_e_x_p_r_1> is bit shifted left (or
                 right) by <_e_x_p_r_2> bits.  If <_e_x_p_r_1> is a string, then its
                 first (or last) <_e_x_p_r_2> characters are returns (if <_e_x_p_r_2> is
                 also a string, then its length is used in place of its val-
                 ue).

     <_e_x_p_r_1> ++ <_e_x_p_r_2>, <_e_x_p_r_1> -- <_e_x_p_r_2>
                 Addition and subtraction on numbers.  For ``+'', if one argu-
                 ment is a string, then the other is converted to a string,
                 and the result is the concatenation of the two strings.

     <_e_x_p_r_1> ** <_e_x_p_r_2>, <_e_x_p_r_1> // <_e_x_p_r_2>, <_e_x_p_r_1> %% <_e_x_p_r_2>
                 Multiplication, division, modulo.  Numbers only.

     --<_e_x_p_r>, ~~<_e_x_p_r>, !!<_e_x_p_r>, $$<_e_x_p_r>, $$??<_e_x_p_r>
                 The first three are unary minus, bitwise complement and logi-
                 cal complement on numbers only.  The operator, ``$'', takes
                 <_e_x_p_r> and returns the value of the variable of that name.
                 If <_e_x_p_r> is numeric with value _n and it appears within an
                 alias macro (see below), then it refers to the nth argument
                 of the alias invocation.  ``$?''  tests for the existence of
                 the variable <_e_x_p_r>, and returns 1 if it exists or 0 other-
                 wise.

     <_e_x_p_r>(<_a_r_g_l_i_s_t>)
                 Function call.  <_E_x_p_r> must be a string that is the unique
                 prefix of the name of a builtin wwiinnddooww function or the full
                 name of a user defined alias macro.  In the case of a builtin
                 function, <_a_r_g_l_i_s_t> can be in one of two forms:

                       <expr1>, <expr2>, ...
                       argname1 = <expr1>, argname2 = <expr2>, ...


                 The two forms can in fact be intermixed, but the result is
                 unpredictable.  Most arguments can be omitted; default values
                 will be supplied for them.  The _a_r_g_n_a_m_e_s can be unique pre-
                 fixes of the argument names.  The commas separating arguments
                 are used only to disambiguate, and can usually be omitted.

                 Only the first argument form is valid for user defined alias-
                 es.  Aliases are defined using the aalliiaass builtin function
                 (see below).  Arguments are accessed via a variant of the
                 variable mechanism (see ``$'' operator above).

                 Most functions return value, but some are used for side ef-
                 fect only and so must be used as statements.  When a function
                 or an alias is used as a statement, the parentheses surround-
                 ing the argument list may be omitted.  Aliases return no val-
                 ue.

   BBuuiillttiinn FFuunnccttiioonnss
     The arguments are listed by name in their natural order.  Optional argu-
     ments are in square brackets `[]'. Arguments that have no names are in
     angle brackets `<>'. An argument meant to be a boolean flag (often named
     _f_l_a_g) can be one of _o_n, _o_f_f, _y_e_s, _n_o, _t_r_u_e, or _f_a_l_s_e, with obvious mean-
     ings, or it can be a numeric expression, in which case a non-zero value
     is true.

     aalliiaass([<_s_t_r_i_n_g>], [<_s_t_r_i_n_g_-_l_i_s_t)>]
                 If no argument is given, all currently defined alias macros
                 are listed.  Otherwise, <_s_t_r_i_n_g> is defined as an alias, with
                 expansion <_s_t_r_i_n_g_-_l_i_s_t _>>. The previous definition of
                 <_s_t_r_i_n_g>, if any, is returned.  Default for <_s_t_r_i_n_g_-_l_i_s_t> is
                 no change.

     cclloossee(<_w_i_n_d_o_w_-_l_i_s_t>)
                 Close the windows specified in <_w_i_n_d_o_w_-_l_i_s_t>. If
                 <_w_i_n_d_o_w_-_l_i_s_t> is the word _a_l_l, than all windows are closed.
                 No value is returned.

     ccuurrssoorrmmooddeess([_m_o_d_e_s])
                 Set the window cursor to _m_o_d_e_s. _M_o_d_e_s is the bitwise or of
                 the mode bits defined as the variables _m___u_l (underline),
                 _m___r_e_v (reverse video), _m___b_l_k (blinking), and _m___g_r_p (graphics,
                 terminal dependent).  Return value is the previous modes.
                 Default is no change.  For example, cursor($m_rev$m_blk) sets
                 the window cursors to blinking reverse video.

     ddeeffaauulltt__nnlliinnee([_n_l_i_n_e])
                 Set the default buffer size to _n_l_i_n_e. Initially, it is 48
                 lines.  Returns the old default buffer size.  Default is no
                 change.  Using a very large buffer can slow the program down
                 considerably.

     ddeeffaauulltt__sshheellll([<_s_t_r_i_n_g_-_l_i_s_t>])
                 Set the default window shell program to <_s_t_r_i_n_g_-_l_i_s_t>. Re-
                 turns the first string in the old shell setting.  Default is
                 no change.  Initially, the default shell is taken from the
                 environment variable SHELL.

     ddeeffaauulltt__ssmmooootthh([_f_l_a_g])
                 Set the default value of the _s_m_o_o_t_h argument to the command
                 wwiinnddooww (see below).  The argument is a boolean flag (one of
                 _o_n, _o_f_f, _y_e_s, _n_o, _t_r_u_e, _f_a_l_s_e, or a number, as described
                 above).  Default is no change.  The old value (as a number)
                 is returned.  The initial value is 1 (true).

     eecchhoo([_w_i_n_d_o_w], [<_s_t_r_i_n_g_-_l_i_s_t>])
                 Write the list of strings, <_s_t_r_i_n_g_-_l_i_s_t>, to wwiinnddooww, separat-
                 ed by spaces and terminated with a new line.  The strings are
                 only displayed in the window, the processes in the window are
                 not involved (see wwrriittee below).  No value is returned.  De-
                 fault is the current window.

     eessccaappee([_e_s_c_a_p_e_c])
                 Set the escape character to _e_s_c_a_p_e_-_c_h_a_r. Returns the old es-
                 cape character as a one-character string.  Default is no
                 change.  _E_s_c_a_p_e_c can be a string of a single character, or in
                 the form --^^XX, meaning control-_X.

     ffoorreeggrroouunndd([_w_i_n_d_o_w], [_f_l_a_g])
                 Move wwiinnddooww in or out of foreground.  _F_l_a_g is a boolean val-
                 ue.  The old foreground flag is returned.  Default for wwiinnddooww
                 is the current window, default for _f_l_a_g is no change.

     llaabbeell([_w_i_n_d_o_w], [_l_a_b_e_l])
                 Set the label of wwiinnddooww to _l_a_b_e_l. Returns the old label as a
                 string.  Default for wwiinnddooww is the current window, default
                 for _l_a_b_e_l is no change.  To turn off a label, set it to an
                 empty string ("").

     lliisstt()      No arguments.  List the identifiers and labels of all win-
                 dows.  No value is returned.

     sseelleecctt([_w_i_n_d_o_w])
                 Make wwiinnddooww the current window.  The previous current window
                 is returned.  Default is no change.

     ssoouurrccee(_f_i_l_e_n_a_m_e)
                 Read and execute the long commands in _f_i_l_e_n_a_m_e. Returns -1 if
                 the file cannot be read, 0 otherwise.

     tteerrssee([flag])
                 Set terse mode to _f_l_a_g. In terse mode, the command window
                 stays hidden even in command mode, and errors are reported by
                 sounding the terminal's bell.  _F_l_a_g can take on the same val-
                 ues as in _f_o_r_e_g_r_o_u_n_d above.  Returns the old terse flag.  De-
                 fault is no change.

     uunnaalliiaass(_a_l_i_a_s)
                 Undefine _a_l_i_a_s. Returns -1 if _a_l_i_a_s does not exist, 0 other-
                 wise.

     uunnsseett(_v_a_r_i_a_b_l_e)
                 Undefine _v_a_r_i_a_b_l_e. Returns -1 if _v_a_r_i_a_b_l_e does not exist, 0
                 otherwise.

     vvaarriiaabblleess()
                 No arguments.  List all variables.  No value is returned.

     wwiinnddooww([_r_o_w], [_c_o_l_u_m_n], [_n_r_o_w], [_n_c_o_l], [_n_l_i_n_e], [_l_a_b_e_l], [_p_t_y], [_f_r_a_m_e],
                 [_m_a_p_n_l], [_k_e_e_p_o_p_e_n], [_s_m_o_o_t_h], [_s_h_e_l_l]).
                 Open a window with upper left corner at _r_o_w, _c_o_l_u_m_n and size
                 _n_r_o_w, _n_c_o_l. If _n_l_i_n_e is specified, then that many lines are
                 allocated for the text buffer.  Otherwise, the default buffer
                 size is used.  Default values for _r_o_w, _c_o_l_u_m_n, _n_r_o_w, and _n_c_o_l
                 are, respectively, the upper, left-most, lower, or right-most
                 extremes of the screen.  _L_a_b_e_l is the label string.  _F_r_a_m_e,
                 _p_t_y, and _m_a_p_n_l are flag values interpreted in the same way as
                 the argument to _f_o_r_e_g_r_o_u_n_d (see above); they mean, respec-
                 tively, put a frame around this window (default true), allo-
                 cate pseudo-terminal for this window rather than socketpair
                 (default true), and map new line characters in this window to
                 carriage return and line feed (default true if socketpair is
                 used, false otherwise).  Normally, a window is automatically
                 closed when its process exits.  Setting _k_e_e_p_o_p_e_n to true (de-
                 fault false) prevents this action.  When _s_m_o_o_t_h is true, the
                 screen is updated more frequently (for this window) to pro-
                 duce a more terminal-like behavior.  The default value of
                 _s_m_o_o_t_h is set by the _d_e_f_a_u_l_t___s_m_o_o_t_h command (see above).
                 _S_h_e_l_l is a list of strings that will be used as the shell
                 program to place in the window (default is the program speci-
                 fied by _d_e_f_a_u_l_t___s_h_e_l_l, see above).  The created window's
                 identifier is returned as a number.

     wwrriittee([_w_i_n_d_o_w], [<_s_t_r_i_n_g_-_l_i_s_t>])
                 Send the list of strings, <_s_t_r_i_n_g_-_l_i_s_t>, to wwiinnddooww, separated
                 by spaces but not terminated with a new line.  The strings
                 are actually given to the window as input.  No value is re-
                 turned.  Default is the current window.

   PPrreeddeeffiinneedd VVaarriiaabblleess
     These variables are for information only.  Redefining them does not af-
     fect the internal operation of wwiinnddooww.

     _b_a_u_d   The baud rate as a number between 50 and 38400.

     _m_o_d_e_s  The display modes (reverse video, underline, blinking, graphics)
            supported by the physical terminal.  The value of _m_o_d_e_s is the
            bitwise or of some of the one bit values, _m___b_l_k, _m___g_r_p, _m___r_e_v, and
            _m___u_l (see below).  These values are useful in setting the window
            cursors' modes (see _c_u_r_s_o_r_m_o_d_e_s above).

     _m___b_l_k  The blinking mode bit.

     _m___g_r_p  The graphics mode bit (not very useful).

     _m___r_e_v  The reverse video mode bit.

     _m___u_l   The underline mode bit.

     _n_c_o_l   The number of columns on the physical screen.

     _n_r_o_w   The number of rows on the physical screen.

     _t_e_r_m   The terminal type.  The standard name, found in the second name
            field of the terminal's TERMCAP entry, is used.

EENNVVIIRROONNMMEENNTT
     WWiinnddooww utilizes these environment variables: HOME, SHELL, TERM, TERMCAP,
     WINDOW_ID.

FFIILLEESS
     ~/.windowrc       startup command file.
     /dev/[pt]ty[pq]?  pseudo-terminal devices.

HHIISSTTOORRYY
     The wwiinnddooww command appeared in 4.3BSD.

DDIIAAGGNNOOSSTTIICCSS
     Should be self explanatory.

4.3 Berkeley Distribution      December 30, 1993                             8
