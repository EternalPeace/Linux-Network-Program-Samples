SIGALTSTACK(2)              BSD Programmer's Manual             SIGALTSTACK(2)

NNAAMMEE
     ssiiggaallttssttaacckk - set and/or get signal stack context

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssiiggnnaall..hh>>
     struct sigaltstack {
             caddr_t ss_base;
             long    ss_size;
             int     ss_flags;
     };

     _i_n_t
     ssiiggaallttssttaacckk(_c_o_n_s_t _s_t_r_u_c_t _s_i_g_a_l_t_s_t_a_c_k _*_s_s, _s_t_r_u_c_t _s_i_g_a_l_t_s_t_a_c_k _*_o_s_s);

DDEESSCCRRIIPPTTIIOONN
     SSiiggaallttssttaacckk() allows users to define an alternate stack on which signals
     are to be processed.  If _s_s is non-zero, it specifies a pointer to and
     the size of a _s_i_g_n_a_l _s_t_a_c_k on which to deliver signals, and tells the
     system if the process is currently executing on that stack.  When a sig-
     nal's action indicates its handler should execute on the signal stack
     (specified with a sigaction(2) call), the system checks to see if the
     process is currently executing on that stack.  If the process is not cur-
     rently executing on the signal stack, the system arranges a switch to the
     signal stack for the duration of the signal handler's execution.

     If SA_DISABLE is set in _s_s___f_l_a_g_s, _s_s___b_a_s_e and _s_s___s_i_z_e are ignored and the
     signal stack will be disabled.  Trying to disable an active stack will
     cause ssiiggaallttssttaacckk to return -1 with _e_r_r_n_o set to EINVAL. A disabled stack
     will cause all signals to be taken on the regular user stack.  If the
     stack is later re-enabled then all signals that were specified to be pro-
     cessed on an alternate stack will resume doing so.

     If _o_s_s is non-zero, the current signal stack state is returned.  The
     _s_s___f_l_a_g_s field will contain the value SA_ONSTACK if the process is cur-
     rently on a signal stack and SA_DISABLE if the signal stack is currently
     disabled.

NNOOTTEESS
     The value SIGSTKSZ is defined to be the number of bytes/chars that would
     be used to cover the usual case when allocating an alternate stack area.
     The following code fragment is typically used to allocate an alternate
     stack.

           if ((sigstk.ss_base = malloc(SIGSTKSZ)) == NULL)
                   /* error return */
           sigstk.ss_size = SIGSTKSZ;
           sigstk.ss_flags = 0;
           if (sigaltstack(&sigstk,0) < 0)
                   perror("sigaltstack");
     An alternative approach is provided for programs with signal handlers
     that require a specific amount of stack space other than the default
     size.  The value MINSIGSTKSZ is defined to be the number of bytes/chars
     that is required by the operating system to implement the alternate stack
     feature.  In computing an alternate stack size, programs should add
     MINSIGSTKSZ to their stack requirements to allow for the operating system
     overhead.

     Signal stacks are automatically adjusted for the direction of stack
     growth and alignment requirements.  Signal stacks may or may not be pro-
     tected by the hardware and are not ``grown'' automatically as is done for
     the normal stack.  If the stack overflows and this space is not protected
     unpredictable results may occur.

RREETTUURRNN VVAALLUUEESS
     Upon successful completion, a value of 0 is returned.  Otherwise, a value
     of -1 is returned and _e_r_r_n_o is set to indicate the error.

EERRRROORRSS
     SSiiggssttaacckk() will fail and the signal stack context will remain unchanged
     if one of the following occurs.

     [EFAULT]  Either _s_s or _o_s_s points to memory that is not a valid part of
               the process address space.

     [EINVAL]  An attempt was made to disable an active stack.

     [ENOMEM]  Size of alternate stack area is less than or equal to
               MINSIGSTKSZ.

SSEEEE AALLSSOO
     sigaction(2),  setjmp(3)

HHIISSTTOORRYY
     The predecessor to ssiiggaallttssttaacckk, the ssiiggssttaacckk() system call, appeared in
     4.2BSD.

4.2 Berkeley Distribution         May 1, 1995                                2
