MLOCK(2)                    BSD Programmer's Manual                   MLOCK(2)

NNAAMMEE
     mmlloocckk, mmuunnlloocckk - lock (unlock) physical pages in memory

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<ssyyss//ttyyppeess..hh>>
     ##iinncclluuddee <<ssyyss//mmmmaann..hh>>

     _i_n_t
     mmlloocckk(_c_a_d_d_r___t _a_d_d_r, _s_i_z_e___t _l_e_n);

     _i_n_t
     mmuunnlloocckk(_c_a_d_d_r___t _a_d_d_r, _s_i_z_e___t _l_e_n);

DDEESSCCRRIIPPTTIIOONN
     The mmlloocckk system call locks into memory the physical pages associated
     with the virtual address range starting at _a_d_d_r for _l_e_n bytes.  The
     mmuunnlloocckk call unlocks pages previously locked by one or more mmlloocckk calls.
     For both, the _a_d_d_r parameter should be aligned to a multiple of the page
     size.  If the _l_e_n parameter is not a multiple of the page size, it will
     be rounded up to be so.  The entire range must be allocated.

     After an mmlloocckk call, the indicated pages will cause neither a non-
     resident page nor address-translation fault until they are unlocked.
     They may still cause protection-violation faults or TLB-miss faults on
     architectures with software-managed TLBs.  The physical pages remain in
     memory until all locked mappings for the pages are removed.  Multiple
     processes may have the same physical pages locked via their own virtual
     address mappings.  A single process may likewise have pages multiply-
     locked via different virtual mappings of the same pages or via nested
     mmlloocckk calls on the same address range.  Unlocking is performed explicitly
     by mmuunnlloocckk or implicitly by a call to mmuunnmmaapp which deallocates the un-
     mapped address range.  Locked mappings are not inherited by the child
     process after a fork(2).

     Since physical memory is a potentially scarce resource, processes are
     limited in how much they can lock down.  A single process can mmlloocckk the
     minimum of a system-wide ``wired pages'' limit and the per-process
     RLIMIT_MEMLOCK resource limit.

RREETTUURRNN VVAALLUUEESS
     A return value of 0 indicates that the call succeeded and all pages in
     the range have either been locked or unlocked.  A return value of -1 in-
     dicates an error occurred and the locked status of all pages in the range
     remains unchanged.  In this case, the global location _e_r_r_n_o is set to in-
     dicate the error.

EERRRROORRSS
     MMlloocckk() will fail if:

     [EINVAL]      The address given is not page aligned or the length is neg-
                   ative.

     [EAGAIN]      Locking the indicated range would exceed either the system
                   or per-process limit for locked memory.

     [ENOMEM]      Some portion of the indicated address range is not allocat-
                   ed.  There was an error faulting/mapping a page.
     MMuunnlloocckk() will fail if:

     [EINVAL]      The address given is not page aligned or the length is neg-
                   ative.

     [ENOMEM]      Some portion of the indicated address range is not allocat-
                   ed.  Some portion of the indicated address range is not
                   locked.

SSEEEE AALLSSOO
     fork(2),  mmap(2),  munmap(2),  setrlimit(2),  getpagesize(3)

BBUUGGSS
     Unlike The Sun implementation, multiple mmlloocckk calls on the same address
     range require the corresponding number of mmuunnlloocckk calls to actually un-
     lock the pages, i.e.  mmlloocckk nests.  This should be considered a conse-
     quence of the implementation and not a feature.

     The per-process resource limit is a limit on the amount of virtual memory
     locked, while the system-wide limit is for the number of locked physical
     pages.  Hence a process with two distinct locked mappings of the same
     physical page counts as 2 pages against the per-process limit and as only
     a single page in the system limit.

HHIISSTTOORRYY
     The mmlloocckk() and mmuunnlloocckk() functions first appeared in 4.4BSD.

4.4BSD                           June 2, 1993                                2
