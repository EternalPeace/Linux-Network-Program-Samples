KVM_GETPROCS(3)             BSD Programmer's Manual            KVM_GETPROCS(3)

NNAAMMEE
     kkvvmm__ggeettpprrooccss, kkvvmm__ggeettaarrggvv, kkvvmm__ggeetteennvvvv - access user process state

SSYYNNOOPPSSIISS
     ##iinncclluuddee <<kkvvmm..hh>>
     ##iinncclluuddee <<ssyyss//kkiinnffoo..hh>>
     ##iinncclluuddee <<ssyyss//kkiinnffoo__pprroocc..hh>>

     _s_t_r_u_c_t _k_i_n_f_o___p_r_o_c _*
     kkvvmm__ggeettpprrooccss(_k_v_m___t _*_k_d, _i_n_t _o_p, _i_n_t _a_r_g, _i_n_t _*_c_n_t);

     _c_h_a_r _*_*
     kkvvmm__ggeettaarrggvv(_k_v_m___t _*_k_d, _c_o_n_s_t _s_t_r_u_c_t _k_i_n_f_o___p_r_o_c _*_p, _i_n_t _n_c_h_r);

     _c_h_a_r _*_*
     kkvvmm__ggeetteennvvvv(_k_v_m___t _*_k_d, _c_o_n_s_t _s_t_r_u_c_t _k_i_n_f_o___p_r_o_c _*_p, _i_n_t _n_c_h_r);

DDEESSCCRRIIPPTTIIOONN
     kkvvmm__ggeettpprrooccss() returns a (sub-)set of active processes in the kernel in-
     dicated by _k_d_. The _o_p and _a_r_g arguments constitute a predicate which lim-
     its the set of processes returned.  The value of _o_p describes the filter-
     ing predicate as follows:

           KKIINNFFOO__PPRROOCC__AALLLL        all processes
           KKIINNFFOO__PPRROOCC__PPIIDD        processes with process id _a_r_g
           KKIINNFFOO__PPRROOCC__PPGGRRPP       processes with process group _a_r_g
           KKIINNFFOO__PPRROOCC__SSEESSSSIIOONN    processes with session _a_r_g
           KKIINNFFOO__PPRROOCC__TTTTYY        processes with tty _a_r_g
           KKIINNFFOO__PPRROOCC__UUIIDD        processes with effective user id _a_r_g
           KKIINNFFOO__PPRROOCC__RRUUIIDD       processes with real user id _a_r_g

     The number of processes found is returned in the reference parameter _c_n_t.
     The processes are returned as a contiguous array of kinfo_proc struc-
     tures.  This memory is locally allocated, and subsequent calls to
     kkvvmm__ggeettpprrooccss() and kkvvmm__cclloossee() will overwrite this storage.

     kkvvmm__ggeettaarrggvv() returns a null-terminated argument vector that corresponds
     to the command line arguments passed to process indicated by _p. Most
     likely, these arguments correspond to the values passed to exec(3) on
     process creation.  This information is, however, deliberately under con-
     trol of the process itself.  Note that the original command name can be
     found, unaltered, in the p_comm field of the process structure returned
     by kkvvmm__ggeettpprrooccss().

     The _n_c_h_r argument indicates the maximum number of characters, including
     null bytes, to use in building the strings.  If this amount is exceeded,
     the string causing the overflow is truncated and the partial result is
     returned.  This is handy for programs like ps(1) and w(1) that print only
     a one line summary of a command and should not copy out large amounts of
     text only to ignore it.  If _n_c_h_r is zero, no limit is imposed and all ar-
     gument strings are returned in their entirety.

     The memory allocated to the argv pointers and string storage is owned by
     the kvm library.  Subsequent kkvvmm__ggeettpprrooccss() and kvm_close(3) calls will
     clobber this storage.

     The kkvvmm__ggeetteennvvvv() function is similar to kkvvmm__ggeettaarrggvv() but returns the
     vector of environment strings.  This data is also alterable by the pro-
     cess.

RREETTUURRNN VVAALLUUEESS
     kkvvmm__ggeettpprrooccss(), kkvvmm__ggeettaarrggvv(), and kkvvmm__ggeetteennvvvv(), all return NULL on
     failure.

BBUUGGSS
     These routines do not belong in the kvm interface.

SSEEEE AALLSSOO
     kvm(3),  kvm_close(3),  kvm_geterr(3),  kvm_nlist(3),  kvm_open(3),
     kvm_openfiles(3),  kvm_read(3),  kvm_write(3)

4.4BSD                           June 4, 1993                                2
