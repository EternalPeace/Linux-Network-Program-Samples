GRF(4)           BSD Programmer's Manual (HP300 Architecture)           GRF(4)

NNAAMMEE
     ggrrff - HP graphics frame buffer device interface

DDEESSCCRRIIPPTTIIOONN
     This is a generic description of the frame buffer device interface.  The
     devices to which this applies are the 98544, 98545 and 98547 Topcat dis-
     play cards (also known as HP300H devices), the 98548, 98549 and 98550
     Catseye display cards, the 98700 Gatorbox graphics box, the 98720 Renais-
     sance graphics box, and the 98730 DaVinci graphics box.

     Use of the devices can be effectively approached from two directions.
     The first is through HP-UX _S_t_a_r_b_a_s_e routines, the second is by direct
     control in the BSD environment.  In order to use the Starbase libraries,
     code must be compiled in an HP-UX environment, either by doing so on an
     HP-UX machine and transferring the binaries to the BSD machine, or by
     compilation with the use of the hpux(1) command.  Applications using
     Starbase libraries have been run successfully on BSD machines using both
     of these compilation techniques.

     Direct compilation, such as that used for the X Window System servers,
     has also been successful.  Examples of some frame buffer operations can
     be found in the device dependent X Window system sources, for example the
     _/_u_s_r_/_s_r_c_/_n_e_w_/_X_/_l_i_b_h_p_._f_b directory.  These files contain examples of de-
     vice dependent color map initialization, frame buffer operations, bit
     moving routines etc.

     The basic programming of the ggrrff? devices involves opening the device
     file, mapping the control registers and frame buffer addresses into user
     space, and then manipulating the device as the application requires.  The
     address mapping is controlled by an ioctl(2) call to map the device into
     user space, and an unmap call when finished.  The ioctls supported by BSD
     are:

     GRFIOCGINFO
             Get Graphics Info

             Get info about device, setting the entries in the _g_r_f_i_n_f_o struc-
             ture, as defined in <hpdev/grfioctl.h>:

             struct  grfinfo {
                     int     gd_id;          /* HPUX identifier */
                     caddr_t gd_regaddr;     /* control registers physaddr */
                     int     gd_regsize;     /* control registers size */
                     caddr_t gd_fbaddr;      /* frame buffer physaddr */
                     int     gd_fbsize;      /* frame buffer size */
                     short   gd_colors;      /* number of colors */
                     short   gd_planes;      /* number of planes */
             /* new stuff */
                     int     gd_fbwidth;     /* frame buffer width */
                     int     gd_fbheight;    /* frame buffer height */
                     int     gd_dwidth;      /* displayed part width */
                     int     gd_dheight;     /* displayed part height */
                     int     gd_pad[6];      /* for future expansion */
             };

     GRFIOCON
             Graphics On

             Turn graphics on by enabling CRT output.  The screen will come
             on, displaying whatever is in the frame buffer, using whatever
             colormap is in place.

     GRFIOCOFF
             Graphics Off

             Turn graphics off by disabling output to the CRT. The frame
             buffer contents are not affected.

     GRFIOCMAP
             Map Device to user space

             Map in control registers and framebuffer space. Once the device
             file is mapped, the frame buffer structure is accessible.

     GRFIOCUNMAP
             Unmap Device

             Unmap control registers and framebuffer space.

     For further information about the use of ioctl see the man page.

EEXXAAMMPPLLEE
     This short code fragment is an example of opening some graphics device
     and mapping in the control and frame buffer space:

     #define GRF_DEV <some_graphics_device>  /* /dev/grfN */
     {
             struct fbstruct *regs;  /*  fbstruct = gboxfb, rboxfb, etc. */
             u_char *Addr, frame_buffer;
             struct grfinfo gi;
             int disp_fd;

             disp_fd = open(GRF_DEV,1);
             if (ioctl (disp_fd, GRFIOCGINFO, &gi) < 0) return -1;
             (void) ioctl (disp_fd, GRFIOCON, 0);

             Addr = (u_char *) 0;
             if (ioctl (disp_fd, GRFIOCMAP, &Addr) < 0) {
                     (void) ioctl (disp_fd, GRFIOCOFF, 0);
                     return -1;
             }
             regs = (fbstruct *) Addr;               /* Control Registers   */
             frame_buffer = (u_char *) Addr + gi.gd_regsize; /* Frame buffer mem */
     }

FFIILLEESS
     /dev/grf?    BSD interface special files
     /dev/*crt*   HP-UX _s_t_a_r_b_a_s_e interface special files

DDIIAAGGNNOOSSTTIICCSS
     None under BSD. HP-UX The CE.utilities/Crtadjust programs must be used
     for each specific device.

EERRRROORRSS
     [ENODEV]  no such device.

     [EBUSY]   Another process has the device open.

     [EINVAL]  Invalid ioctl specification.

SSEEEE AALLSSOO
     ioctl(2),  dv(4),  gb(4),  rb(4),  tc(4),  hil(4)

4.4BSD                           June 9, 1993                                2
